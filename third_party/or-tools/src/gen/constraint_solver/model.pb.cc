// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: constraint_solver/model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "constraint_solver/model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace operations_research {

namespace {

const ::google::protobuf::Descriptor* CPIntegerMatrixProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPIntegerMatrixProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPArgumentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPArgumentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPExtensionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPExtensionProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPIntegerExpressionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPIntegerExpressionProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPIntervalVariableProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPIntervalVariableProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPSequenceVariableProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPSequenceVariableProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPConstraintProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPConstraintProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPObjectiveProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPObjectiveProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPVariableGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPVariableGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPModelProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPModelProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto() {
  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "constraint_solver/model.proto");
  GOOGLE_CHECK(file != NULL);
  CPIntegerMatrixProto_descriptor_ = file->message_type(0);
  static const int CPIntegerMatrixProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerMatrixProto, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerMatrixProto, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerMatrixProto, values_),
  };
  CPIntegerMatrixProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPIntegerMatrixProto_descriptor_,
      CPIntegerMatrixProto::default_instance_,
      CPIntegerMatrixProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerMatrixProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerMatrixProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPIntegerMatrixProto));
  CPArgumentProto_descriptor_ = file->message_type(1);
  static const int CPArgumentProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, argument_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, integer_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, integer_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, integer_expression_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, integer_expression_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, interval_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, interval_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, sequence_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, sequence_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, integer_matrix_),
  };
  CPArgumentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPArgumentProto_descriptor_,
      CPArgumentProto::default_instance_,
      CPArgumentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPArgumentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPArgumentProto));
  CPExtensionProto_descriptor_ = file->message_type(2);
  static const int CPExtensionProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPExtensionProto, type_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPExtensionProto, arguments_),
  };
  CPExtensionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPExtensionProto_descriptor_,
      CPExtensionProto::default_instance_,
      CPExtensionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPExtensionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPExtensionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPExtensionProto));
  CPIntegerExpressionProto_descriptor_ = file->message_type(3);
  static const int CPIntegerExpressionProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerExpressionProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerExpressionProto, type_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerExpressionProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerExpressionProto, arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerExpressionProto, extensions_),
  };
  CPIntegerExpressionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPIntegerExpressionProto_descriptor_,
      CPIntegerExpressionProto::default_instance_,
      CPIntegerExpressionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerExpressionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntegerExpressionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPIntegerExpressionProto));
  CPIntervalVariableProto_descriptor_ = file->message_type(4);
  static const int CPIntervalVariableProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntervalVariableProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntervalVariableProto, type_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntervalVariableProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntervalVariableProto, arguments_),
  };
  CPIntervalVariableProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPIntervalVariableProto_descriptor_,
      CPIntervalVariableProto::default_instance_,
      CPIntervalVariableProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntervalVariableProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPIntervalVariableProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPIntervalVariableProto));
  CPSequenceVariableProto_descriptor_ = file->message_type(5);
  static const int CPSequenceVariableProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSequenceVariableProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSequenceVariableProto, type_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSequenceVariableProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSequenceVariableProto, arguments_),
  };
  CPSequenceVariableProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPSequenceVariableProto_descriptor_,
      CPSequenceVariableProto::default_instance_,
      CPSequenceVariableProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSequenceVariableProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSequenceVariableProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPSequenceVariableProto));
  CPConstraintProto_descriptor_ = file->message_type(6);
  static const int CPConstraintProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPConstraintProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPConstraintProto, type_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPConstraintProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPConstraintProto, arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPConstraintProto, extensions_),
  };
  CPConstraintProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPConstraintProto_descriptor_,
      CPConstraintProto::default_instance_,
      CPConstraintProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPConstraintProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPConstraintProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPConstraintProto));
  CPObjectiveProto_descriptor_ = file->message_type(7);
  static const int CPObjectiveProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPObjectiveProto, maximize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPObjectiveProto, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPObjectiveProto, objective_index_),
  };
  CPObjectiveProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPObjectiveProto_descriptor_,
      CPObjectiveProto::default_instance_,
      CPObjectiveProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPObjectiveProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPObjectiveProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPObjectiveProto));
  CPVariableGroup_descriptor_ = file->message_type(8);
  static const int CPVariableGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPVariableGroup, arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPVariableGroup, type_),
  };
  CPVariableGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPVariableGroup_descriptor_,
      CPVariableGroup::default_instance_,
      CPVariableGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPVariableGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPVariableGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPVariableGroup));
  CPModelProto_descriptor_ = file->message_type(9);
  static const int CPModelProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, expressions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, sequences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, constraints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, objective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, search_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, variable_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, license_text_),
  };
  CPModelProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPModelProto_descriptor_,
      CPModelProto::default_instance_,
      CPModelProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPModelProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPModelProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPIntegerMatrixProto_descriptor_, &CPIntegerMatrixProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPArgumentProto_descriptor_, &CPArgumentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPExtensionProto_descriptor_, &CPExtensionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPIntegerExpressionProto_descriptor_, &CPIntegerExpressionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPIntervalVariableProto_descriptor_, &CPIntervalVariableProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPSequenceVariableProto_descriptor_, &CPSequenceVariableProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPConstraintProto_descriptor_, &CPConstraintProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPObjectiveProto_descriptor_, &CPObjectiveProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPVariableGroup_descriptor_, &CPVariableGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPModelProto_descriptor_, &CPModelProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto() {
  delete CPIntegerMatrixProto::default_instance_;
  delete CPIntegerMatrixProto_reflection_;
  delete CPArgumentProto::default_instance_;
  delete CPArgumentProto_reflection_;
  delete CPExtensionProto::default_instance_;
  delete CPExtensionProto_reflection_;
  delete CPIntegerExpressionProto::default_instance_;
  delete CPIntegerExpressionProto_reflection_;
  delete CPIntervalVariableProto::default_instance_;
  delete CPIntervalVariableProto_reflection_;
  delete CPSequenceVariableProto::default_instance_;
  delete CPSequenceVariableProto_reflection_;
  delete CPConstraintProto::default_instance_;
  delete CPConstraintProto_reflection_;
  delete CPObjectiveProto::default_instance_;
  delete CPObjectiveProto_reflection_;
  delete CPVariableGroup::default_instance_;
  delete CPVariableGroup_reflection_;
  delete CPModelProto::default_instance_;
  delete CPModelProto_reflection_;
}

void protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::operations_research::protobuf_AddDesc_constraint_5fsolver_2fsearch_5flimit_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035constraint_solver/model.proto\022\023operati"
    "ons_research\032$constraint_solver/search_l"
    "imit.proto\"E\n\024CPIntegerMatrixProto\022\014\n\004ro"
    "ws\030\001 \001(\005\022\017\n\007columns\030\002 \001(\005\022\016\n\006values\030\003 \003("
    "\003\"\276\002\n\017CPArgumentProto\022\026\n\016argument_index\030"
    "\001 \001(\005\022\025\n\rinteger_value\030\002 \001(\003\022\025\n\rinteger_"
    "array\030\003 \003(\003\022 \n\030integer_expression_index\030"
    "\004 \001(\005\022 \n\030integer_expression_array\030\005 \003(\005\022"
    "\026\n\016interval_index\030\006 \001(\005\022\026\n\016interval_arra"
    "y\030\007 \003(\005\022\026\n\016sequence_index\030\010 \001(\005\022\026\n\016seque"
    "nce_array\030\t \003(\005\022A\n\016integer_matrix\030\n \001(\0132"
    ").operations_research.CPIntegerMatrixPro"
    "to\"_\n\020CPExtensionProto\022\022\n\ntype_index\030\001 \001"
    "(\005\0227\n\targuments\030\002 \003(\0132$.operations_resea"
    "rch.CPArgumentProto\"\277\001\n\030CPIntegerExpress"
    "ionProto\022\r\n\005index\030\001 \001(\005\022\022\n\ntype_index\030\002 "
    "\001(\005\022\014\n\004name\030\003 \001(\t\0227\n\targuments\030\004 \003(\0132$.o"
    "perations_research.CPArgumentProto\0229\n\nex"
    "tensions\030\005 \003(\0132%.operations_research.CPE"
    "xtensionProto\"\203\001\n\027CPIntervalVariableProt"
    "o\022\r\n\005index\030\001 \001(\005\022\022\n\ntype_index\030\002 \001(\005\022\014\n\004"
    "name\030\003 \001(\t\0227\n\targuments\030\004 \003(\0132$.operatio"
    "ns_research.CPArgumentProto\"\203\001\n\027CPSequen"
    "ceVariableProto\022\r\n\005index\030\001 \001(\005\022\022\n\ntype_i"
    "ndex\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\0227\n\targuments\030\004 "
    "\003(\0132$.operations_research.CPArgumentProt"
    "o\"\270\001\n\021CPConstraintProto\022\r\n\005index\030\001 \001(\005\022\022"
    "\n\ntype_index\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\0227\n\targu"
    "ments\030\004 \003(\0132$.operations_research.CPArgu"
    "mentProto\0229\n\nextensions\030\005 \003(\0132%.operatio"
    "ns_research.CPExtensionProto\"K\n\020CPObject"
    "iveProto\022\020\n\010maximize\030\001 \001(\010\022\014\n\004step\030\002 \001(\003"
    "\022\027\n\017objective_index\030\003 \001(\005\"X\n\017CPVariableG"
    "roup\0227\n\targuments\030\001 \003(\0132$.operations_res"
    "earch.CPArgumentProto\022\014\n\004type\030\002 \001(\t\"\213\004\n\014"
    "CPModelProto\022\r\n\005model\030\001 \001(\t\022\017\n\007version\030\002"
    " \001(\005\022\014\n\004tags\030\003 \003(\t\022B\n\013expressions\030\004 \003(\0132"
    "-.operations_research.CPIntegerExpressio"
    "nProto\022\?\n\tintervals\030\005 \003(\0132,.operations_r"
    "esearch.CPIntervalVariableProto\022\?\n\tseque"
    "nces\030\006 \003(\0132,.operations_research.CPSeque"
    "nceVariableProto\022;\n\013constraints\030\007 \003(\0132&."
    "operations_research.CPConstraintProto\0228\n"
    "\tobjective\030\010 \001(\0132%.operations_research.C"
    "PObjectiveProto\022;\n\014search_limit\030\t \001(\0132%."
    "operations_research.SearchLimitProto\022=\n\017"
    "variable_groups\030\n \003(\0132$.operations_resea"
    "rch.CPVariableGroup\022\024\n\014license_text\030\013 \001("
    "\t", 1921);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "constraint_solver/model.proto", &protobuf_RegisterTypes);
  CPIntegerMatrixProto::default_instance_ = new CPIntegerMatrixProto();
  CPArgumentProto::default_instance_ = new CPArgumentProto();
  CPExtensionProto::default_instance_ = new CPExtensionProto();
  CPIntegerExpressionProto::default_instance_ = new CPIntegerExpressionProto();
  CPIntervalVariableProto::default_instance_ = new CPIntervalVariableProto();
  CPSequenceVariableProto::default_instance_ = new CPSequenceVariableProto();
  CPConstraintProto::default_instance_ = new CPConstraintProto();
  CPObjectiveProto::default_instance_ = new CPObjectiveProto();
  CPVariableGroup::default_instance_ = new CPVariableGroup();
  CPModelProto::default_instance_ = new CPModelProto();
  CPIntegerMatrixProto::default_instance_->InitAsDefaultInstance();
  CPArgumentProto::default_instance_->InitAsDefaultInstance();
  CPExtensionProto::default_instance_->InitAsDefaultInstance();
  CPIntegerExpressionProto::default_instance_->InitAsDefaultInstance();
  CPIntervalVariableProto::default_instance_->InitAsDefaultInstance();
  CPSequenceVariableProto::default_instance_->InitAsDefaultInstance();
  CPConstraintProto::default_instance_->InitAsDefaultInstance();
  CPObjectiveProto::default_instance_->InitAsDefaultInstance();
  CPVariableGroup::default_instance_->InitAsDefaultInstance();
  CPModelProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_constraint_5fsolver_2fmodel_2eproto {
  StaticDescriptorInitializer_constraint_5fsolver_2fmodel_2eproto() {
    protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  }
} static_descriptor_initializer_constraint_5fsolver_2fmodel_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CPIntegerMatrixProto::kRowsFieldNumber;
const int CPIntegerMatrixProto::kColumnsFieldNumber;
const int CPIntegerMatrixProto::kValuesFieldNumber;
#endif  // !_MSC_VER

CPIntegerMatrixProto::CPIntegerMatrixProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPIntegerMatrixProto)
}

void CPIntegerMatrixProto::InitAsDefaultInstance() {
}

CPIntegerMatrixProto::CPIntegerMatrixProto(const CPIntegerMatrixProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPIntegerMatrixProto)
}

void CPIntegerMatrixProto::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0;
  columns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPIntegerMatrixProto::~CPIntegerMatrixProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPIntegerMatrixProto)
  SharedDtor();
}

void CPIntegerMatrixProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPIntegerMatrixProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPIntegerMatrixProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPIntegerMatrixProto_descriptor_;
}

const CPIntegerMatrixProto& CPIntegerMatrixProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPIntegerMatrixProto* CPIntegerMatrixProto::default_instance_ = NULL;

CPIntegerMatrixProto* CPIntegerMatrixProto::New() const {
  return new CPIntegerMatrixProto;
}

void CPIntegerMatrixProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPIntegerMatrixProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rows_, columns_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPIntegerMatrixProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPIntegerMatrixProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_columns;
        break;
      }

      // optional int32 columns = 2;
      case 2: {
        if (tag == 16) {
         parse_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columns_)));
          set_has_columns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_values;
        break;
      }

      // repeated int64 values = 3;
      case 3: {
        if (tag == 24) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_values())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPIntegerMatrixProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPIntegerMatrixProto)
  return false;
#undef DO_
}

void CPIntegerMatrixProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPIntegerMatrixProto)
  // optional int32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 columns = 2;
  if (has_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->columns(), output);
  }

  // repeated int64 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPIntegerMatrixProto)
}

::google::protobuf::uint8* CPIntegerMatrixProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPIntegerMatrixProto)
  // optional int32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 columns = 2;
  if (has_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->columns(), target);
  }

  // repeated int64 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPIntegerMatrixProto)
  return target;
}

int CPIntegerMatrixProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // optional int32 columns = 2;
    if (has_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->columns());
    }

  }
  // repeated int64 values = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPIntegerMatrixProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPIntegerMatrixProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPIntegerMatrixProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPIntegerMatrixProto::MergeFrom(const CPIntegerMatrixProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_columns()) {
      set_columns(from.columns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPIntegerMatrixProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPIntegerMatrixProto::CopyFrom(const CPIntegerMatrixProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPIntegerMatrixProto::IsInitialized() const {

  return true;
}

void CPIntegerMatrixProto::Swap(CPIntegerMatrixProto* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(columns_, other->columns_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPIntegerMatrixProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPIntegerMatrixProto_descriptor_;
  metadata.reflection = CPIntegerMatrixProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPArgumentProto::kArgumentIndexFieldNumber;
const int CPArgumentProto::kIntegerValueFieldNumber;
const int CPArgumentProto::kIntegerArrayFieldNumber;
const int CPArgumentProto::kIntegerExpressionIndexFieldNumber;
const int CPArgumentProto::kIntegerExpressionArrayFieldNumber;
const int CPArgumentProto::kIntervalIndexFieldNumber;
const int CPArgumentProto::kIntervalArrayFieldNumber;
const int CPArgumentProto::kSequenceIndexFieldNumber;
const int CPArgumentProto::kSequenceArrayFieldNumber;
const int CPArgumentProto::kIntegerMatrixFieldNumber;
#endif  // !_MSC_VER

CPArgumentProto::CPArgumentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPArgumentProto)
}

void CPArgumentProto::InitAsDefaultInstance() {
  integer_matrix_ = const_cast< ::operations_research::CPIntegerMatrixProto*>(&::operations_research::CPIntegerMatrixProto::default_instance());
}

CPArgumentProto::CPArgumentProto(const CPArgumentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPArgumentProto)
}

void CPArgumentProto::SharedCtor() {
  _cached_size_ = 0;
  argument_index_ = 0;
  integer_value_ = GOOGLE_LONGLONG(0);
  integer_expression_index_ = 0;
  interval_index_ = 0;
  sequence_index_ = 0;
  integer_matrix_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPArgumentProto::~CPArgumentProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPArgumentProto)
  SharedDtor();
}

void CPArgumentProto::SharedDtor() {
  if (this != default_instance_) {
    delete integer_matrix_;
  }
}

void CPArgumentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPArgumentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPArgumentProto_descriptor_;
}

const CPArgumentProto& CPArgumentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPArgumentProto* CPArgumentProto::default_instance_ = NULL;

CPArgumentProto* CPArgumentProto::New() const {
  return new CPArgumentProto;
}

void CPArgumentProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPArgumentProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 171) {
    ZR_(integer_value_, integer_expression_index_);
    ZR_(interval_index_, sequence_index_);
  }
  if (has_integer_matrix()) {
    if (integer_matrix_ != NULL) integer_matrix_->::operations_research::CPIntegerMatrixProto::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  integer_array_.Clear();
  integer_expression_array_.Clear();
  interval_array_.Clear();
  sequence_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPArgumentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPArgumentProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 argument_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &argument_index_)));
          set_has_argument_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_integer_value;
        break;
      }

      // optional int64 integer_value = 2;
      case 2: {
        if (tag == 16) {
         parse_integer_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &integer_value_)));
          set_has_integer_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_integer_array;
        break;
      }

      // repeated int64 integer_array = 3;
      case 3: {
        if (tag == 24) {
         parse_integer_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_integer_array())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_integer_array())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_integer_array;
        if (input->ExpectTag(32)) goto parse_integer_expression_index;
        break;
      }

      // optional int32 integer_expression_index = 4;
      case 4: {
        if (tag == 32) {
         parse_integer_expression_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_expression_index_)));
          set_has_integer_expression_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_integer_expression_array;
        break;
      }

      // repeated int32 integer_expression_array = 5;
      case 5: {
        if (tag == 40) {
         parse_integer_expression_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_integer_expression_array())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_integer_expression_array())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_integer_expression_array;
        if (input->ExpectTag(48)) goto parse_interval_index;
        break;
      }

      // optional int32 interval_index = 6;
      case 6: {
        if (tag == 48) {
         parse_interval_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_index_)));
          set_has_interval_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_interval_array;
        break;
      }

      // repeated int32 interval_array = 7;
      case 7: {
        if (tag == 56) {
         parse_interval_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_interval_array())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_interval_array())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_interval_array;
        if (input->ExpectTag(64)) goto parse_sequence_index;
        break;
      }

      // optional int32 sequence_index = 8;
      case 8: {
        if (tag == 64) {
         parse_sequence_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_index_)));
          set_has_sequence_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sequence_array;
        break;
      }

      // repeated int32 sequence_array = 9;
      case 9: {
        if (tag == 72) {
         parse_sequence_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_sequence_array())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sequence_array())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sequence_array;
        if (input->ExpectTag(82)) goto parse_integer_matrix;
        break;
      }

      // optional .operations_research.CPIntegerMatrixProto integer_matrix = 10;
      case 10: {
        if (tag == 82) {
         parse_integer_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_integer_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPArgumentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPArgumentProto)
  return false;
#undef DO_
}

void CPArgumentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPArgumentProto)
  // optional int32 argument_index = 1;
  if (has_argument_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->argument_index(), output);
  }

  // optional int64 integer_value = 2;
  if (has_integer_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->integer_value(), output);
  }

  // repeated int64 integer_array = 3;
  for (int i = 0; i < this->integer_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->integer_array(i), output);
  }

  // optional int32 integer_expression_index = 4;
  if (has_integer_expression_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->integer_expression_index(), output);
  }

  // repeated int32 integer_expression_array = 5;
  for (int i = 0; i < this->integer_expression_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->integer_expression_array(i), output);
  }

  // optional int32 interval_index = 6;
  if (has_interval_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->interval_index(), output);
  }

  // repeated int32 interval_array = 7;
  for (int i = 0; i < this->interval_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->interval_array(i), output);
  }

  // optional int32 sequence_index = 8;
  if (has_sequence_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sequence_index(), output);
  }

  // repeated int32 sequence_array = 9;
  for (int i = 0; i < this->sequence_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->sequence_array(i), output);
  }

  // optional .operations_research.CPIntegerMatrixProto integer_matrix = 10;
  if (has_integer_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->integer_matrix(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPArgumentProto)
}

::google::protobuf::uint8* CPArgumentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPArgumentProto)
  // optional int32 argument_index = 1;
  if (has_argument_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->argument_index(), target);
  }

  // optional int64 integer_value = 2;
  if (has_integer_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->integer_value(), target);
  }

  // repeated int64 integer_array = 3;
  for (int i = 0; i < this->integer_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->integer_array(i), target);
  }

  // optional int32 integer_expression_index = 4;
  if (has_integer_expression_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->integer_expression_index(), target);
  }

  // repeated int32 integer_expression_array = 5;
  for (int i = 0; i < this->integer_expression_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->integer_expression_array(i), target);
  }

  // optional int32 interval_index = 6;
  if (has_interval_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->interval_index(), target);
  }

  // repeated int32 interval_array = 7;
  for (int i = 0; i < this->interval_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->interval_array(i), target);
  }

  // optional int32 sequence_index = 8;
  if (has_sequence_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sequence_index(), target);
  }

  // repeated int32 sequence_array = 9;
  for (int i = 0; i < this->sequence_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->sequence_array(i), target);
  }

  // optional .operations_research.CPIntegerMatrixProto integer_matrix = 10;
  if (has_integer_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->integer_matrix(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPArgumentProto)
  return target;
}

int CPArgumentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 argument_index = 1;
    if (has_argument_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->argument_index());
    }

    // optional int64 integer_value = 2;
    if (has_integer_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->integer_value());
    }

    // optional int32 integer_expression_index = 4;
    if (has_integer_expression_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integer_expression_index());
    }

    // optional int32 interval_index = 6;
    if (has_interval_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval_index());
    }

    // optional int32 sequence_index = 8;
    if (has_sequence_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_index());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .operations_research.CPIntegerMatrixProto integer_matrix = 10;
    if (has_integer_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->integer_matrix());
    }

  }
  // repeated int64 integer_array = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->integer_array_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->integer_array(i));
    }
    total_size += 1 * this->integer_array_size() + data_size;
  }

  // repeated int32 integer_expression_array = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->integer_expression_array_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->integer_expression_array(i));
    }
    total_size += 1 * this->integer_expression_array_size() + data_size;
  }

  // repeated int32 interval_array = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->interval_array_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->interval_array(i));
    }
    total_size += 1 * this->interval_array_size() + data_size;
  }

  // repeated int32 sequence_array = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->sequence_array_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sequence_array(i));
    }
    total_size += 1 * this->sequence_array_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPArgumentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPArgumentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPArgumentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPArgumentProto::MergeFrom(const CPArgumentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  integer_array_.MergeFrom(from.integer_array_);
  integer_expression_array_.MergeFrom(from.integer_expression_array_);
  interval_array_.MergeFrom(from.interval_array_);
  sequence_array_.MergeFrom(from.sequence_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_argument_index()) {
      set_argument_index(from.argument_index());
    }
    if (from.has_integer_value()) {
      set_integer_value(from.integer_value());
    }
    if (from.has_integer_expression_index()) {
      set_integer_expression_index(from.integer_expression_index());
    }
    if (from.has_interval_index()) {
      set_interval_index(from.interval_index());
    }
    if (from.has_sequence_index()) {
      set_sequence_index(from.sequence_index());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_integer_matrix()) {
      mutable_integer_matrix()->::operations_research::CPIntegerMatrixProto::MergeFrom(from.integer_matrix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPArgumentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPArgumentProto::CopyFrom(const CPArgumentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPArgumentProto::IsInitialized() const {

  return true;
}

void CPArgumentProto::Swap(CPArgumentProto* other) {
  if (other != this) {
    std::swap(argument_index_, other->argument_index_);
    std::swap(integer_value_, other->integer_value_);
    integer_array_.Swap(&other->integer_array_);
    std::swap(integer_expression_index_, other->integer_expression_index_);
    integer_expression_array_.Swap(&other->integer_expression_array_);
    std::swap(interval_index_, other->interval_index_);
    interval_array_.Swap(&other->interval_array_);
    std::swap(sequence_index_, other->sequence_index_);
    sequence_array_.Swap(&other->sequence_array_);
    std::swap(integer_matrix_, other->integer_matrix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPArgumentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPArgumentProto_descriptor_;
  metadata.reflection = CPArgumentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPExtensionProto::kTypeIndexFieldNumber;
const int CPExtensionProto::kArgumentsFieldNumber;
#endif  // !_MSC_VER

CPExtensionProto::CPExtensionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPExtensionProto)
}

void CPExtensionProto::InitAsDefaultInstance() {
}

CPExtensionProto::CPExtensionProto(const CPExtensionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPExtensionProto)
}

void CPExtensionProto::SharedCtor() {
  _cached_size_ = 0;
  type_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPExtensionProto::~CPExtensionProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPExtensionProto)
  SharedDtor();
}

void CPExtensionProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPExtensionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPExtensionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPExtensionProto_descriptor_;
}

const CPExtensionProto& CPExtensionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPExtensionProto* CPExtensionProto::default_instance_ = NULL;

CPExtensionProto* CPExtensionProto::New() const {
  return new CPExtensionProto;
}

void CPExtensionProto::Clear() {
  type_index_ = 0;
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPExtensionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPExtensionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_index_)));
          set_has_type_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arguments;
        break;
      }

      // repeated .operations_research.CPArgumentProto arguments = 2;
      case 2: {
        if (tag == 18) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arguments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPExtensionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPExtensionProto)
  return false;
#undef DO_
}

void CPExtensionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPExtensionProto)
  // optional int32 type_index = 1;
  if (has_type_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_index(), output);
  }

  // repeated .operations_research.CPArgumentProto arguments = 2;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arguments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPExtensionProto)
}

::google::protobuf::uint8* CPExtensionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPExtensionProto)
  // optional int32 type_index = 1;
  if (has_type_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_index(), target);
  }

  // repeated .operations_research.CPArgumentProto arguments = 2;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arguments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPExtensionProto)
  return target;
}

int CPExtensionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_index = 1;
    if (has_type_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_index());
    }

  }
  // repeated .operations_research.CPArgumentProto arguments = 2;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPExtensionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPExtensionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPExtensionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPExtensionProto::MergeFrom(const CPExtensionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_index()) {
      set_type_index(from.type_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPExtensionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPExtensionProto::CopyFrom(const CPExtensionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPExtensionProto::IsInitialized() const {

  return true;
}

void CPExtensionProto::Swap(CPExtensionProto* other) {
  if (other != this) {
    std::swap(type_index_, other->type_index_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPExtensionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPExtensionProto_descriptor_;
  metadata.reflection = CPExtensionProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPIntegerExpressionProto::kIndexFieldNumber;
const int CPIntegerExpressionProto::kTypeIndexFieldNumber;
const int CPIntegerExpressionProto::kNameFieldNumber;
const int CPIntegerExpressionProto::kArgumentsFieldNumber;
const int CPIntegerExpressionProto::kExtensionsFieldNumber;
#endif  // !_MSC_VER

CPIntegerExpressionProto::CPIntegerExpressionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPIntegerExpressionProto)
}

void CPIntegerExpressionProto::InitAsDefaultInstance() {
}

CPIntegerExpressionProto::CPIntegerExpressionProto(const CPIntegerExpressionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPIntegerExpressionProto)
}

void CPIntegerExpressionProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  type_index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPIntegerExpressionProto::~CPIntegerExpressionProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPIntegerExpressionProto)
  SharedDtor();
}

void CPIntegerExpressionProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CPIntegerExpressionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPIntegerExpressionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPIntegerExpressionProto_descriptor_;
}

const CPIntegerExpressionProto& CPIntegerExpressionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPIntegerExpressionProto* CPIntegerExpressionProto::default_instance_ = NULL;

CPIntegerExpressionProto* CPIntegerExpressionProto::New() const {
  return new CPIntegerExpressionProto;
}

void CPIntegerExpressionProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPIntegerExpressionProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, type_index_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arguments_.Clear();
  extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPIntegerExpressionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPIntegerExpressionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_index;
        break;
      }

      // optional int32 type_index = 2;
      case 2: {
        if (tag == 16) {
         parse_type_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_index_)));
          set_has_type_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        break;
      }

      // repeated .operations_research.CPArgumentProto arguments = 4;
      case 4: {
        if (tag == 34) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        if (input->ExpectTag(42)) goto parse_extensions;
        break;
      }

      // repeated .operations_research.CPExtensionProto extensions = 5;
      case 5: {
        if (tag == 42) {
         parse_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extensions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extensions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPIntegerExpressionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPIntegerExpressionProto)
  return false;
#undef DO_
}

void CPIntegerExpressionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPIntegerExpressionProto)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 type_index = 2;
  if (has_type_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_index(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .operations_research.CPArgumentProto arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arguments(i), output);
  }

  // repeated .operations_research.CPExtensionProto extensions = 5;
  for (int i = 0; i < this->extensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->extensions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPIntegerExpressionProto)
}

::google::protobuf::uint8* CPIntegerExpressionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPIntegerExpressionProto)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 type_index = 2;
  if (has_type_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_index(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .operations_research.CPArgumentProto arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arguments(i), target);
  }

  // repeated .operations_research.CPExtensionProto extensions = 5;
  for (int i = 0; i < this->extensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->extensions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPIntegerExpressionProto)
  return target;
}

int CPIntegerExpressionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type_index = 2;
    if (has_type_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_index());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .operations_research.CPArgumentProto arguments = 4;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  // repeated .operations_research.CPExtensionProto extensions = 5;
  total_size += 1 * this->extensions_size();
  for (int i = 0; i < this->extensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extensions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPIntegerExpressionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPIntegerExpressionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPIntegerExpressionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPIntegerExpressionProto::MergeFrom(const CPIntegerExpressionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  extensions_.MergeFrom(from.extensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type_index()) {
      set_type_index(from.type_index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPIntegerExpressionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPIntegerExpressionProto::CopyFrom(const CPIntegerExpressionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPIntegerExpressionProto::IsInitialized() const {

  return true;
}

void CPIntegerExpressionProto::Swap(CPIntegerExpressionProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_index_, other->type_index_);
    std::swap(name_, other->name_);
    arguments_.Swap(&other->arguments_);
    extensions_.Swap(&other->extensions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPIntegerExpressionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPIntegerExpressionProto_descriptor_;
  metadata.reflection = CPIntegerExpressionProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPIntervalVariableProto::kIndexFieldNumber;
const int CPIntervalVariableProto::kTypeIndexFieldNumber;
const int CPIntervalVariableProto::kNameFieldNumber;
const int CPIntervalVariableProto::kArgumentsFieldNumber;
#endif  // !_MSC_VER

CPIntervalVariableProto::CPIntervalVariableProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPIntervalVariableProto)
}

void CPIntervalVariableProto::InitAsDefaultInstance() {
}

CPIntervalVariableProto::CPIntervalVariableProto(const CPIntervalVariableProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPIntervalVariableProto)
}

void CPIntervalVariableProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  type_index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPIntervalVariableProto::~CPIntervalVariableProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPIntervalVariableProto)
  SharedDtor();
}

void CPIntervalVariableProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CPIntervalVariableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPIntervalVariableProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPIntervalVariableProto_descriptor_;
}

const CPIntervalVariableProto& CPIntervalVariableProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPIntervalVariableProto* CPIntervalVariableProto::default_instance_ = NULL;

CPIntervalVariableProto* CPIntervalVariableProto::New() const {
  return new CPIntervalVariableProto;
}

void CPIntervalVariableProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPIntervalVariableProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, type_index_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPIntervalVariableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPIntervalVariableProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_index;
        break;
      }

      // optional int32 type_index = 2;
      case 2: {
        if (tag == 16) {
         parse_type_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_index_)));
          set_has_type_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        break;
      }

      // repeated .operations_research.CPArgumentProto arguments = 4;
      case 4: {
        if (tag == 34) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPIntervalVariableProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPIntervalVariableProto)
  return false;
#undef DO_
}

void CPIntervalVariableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPIntervalVariableProto)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 type_index = 2;
  if (has_type_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_index(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .operations_research.CPArgumentProto arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arguments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPIntervalVariableProto)
}

::google::protobuf::uint8* CPIntervalVariableProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPIntervalVariableProto)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 type_index = 2;
  if (has_type_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_index(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .operations_research.CPArgumentProto arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arguments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPIntervalVariableProto)
  return target;
}

int CPIntervalVariableProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type_index = 2;
    if (has_type_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_index());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .operations_research.CPArgumentProto arguments = 4;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPIntervalVariableProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPIntervalVariableProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPIntervalVariableProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPIntervalVariableProto::MergeFrom(const CPIntervalVariableProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type_index()) {
      set_type_index(from.type_index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPIntervalVariableProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPIntervalVariableProto::CopyFrom(const CPIntervalVariableProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPIntervalVariableProto::IsInitialized() const {

  return true;
}

void CPIntervalVariableProto::Swap(CPIntervalVariableProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_index_, other->type_index_);
    std::swap(name_, other->name_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPIntervalVariableProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPIntervalVariableProto_descriptor_;
  metadata.reflection = CPIntervalVariableProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPSequenceVariableProto::kIndexFieldNumber;
const int CPSequenceVariableProto::kTypeIndexFieldNumber;
const int CPSequenceVariableProto::kNameFieldNumber;
const int CPSequenceVariableProto::kArgumentsFieldNumber;
#endif  // !_MSC_VER

CPSequenceVariableProto::CPSequenceVariableProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPSequenceVariableProto)
}

void CPSequenceVariableProto::InitAsDefaultInstance() {
}

CPSequenceVariableProto::CPSequenceVariableProto(const CPSequenceVariableProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPSequenceVariableProto)
}

void CPSequenceVariableProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  type_index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPSequenceVariableProto::~CPSequenceVariableProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPSequenceVariableProto)
  SharedDtor();
}

void CPSequenceVariableProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CPSequenceVariableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPSequenceVariableProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPSequenceVariableProto_descriptor_;
}

const CPSequenceVariableProto& CPSequenceVariableProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPSequenceVariableProto* CPSequenceVariableProto::default_instance_ = NULL;

CPSequenceVariableProto* CPSequenceVariableProto::New() const {
  return new CPSequenceVariableProto;
}

void CPSequenceVariableProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPSequenceVariableProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, type_index_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPSequenceVariableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPSequenceVariableProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_index;
        break;
      }

      // optional int32 type_index = 2;
      case 2: {
        if (tag == 16) {
         parse_type_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_index_)));
          set_has_type_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        break;
      }

      // repeated .operations_research.CPArgumentProto arguments = 4;
      case 4: {
        if (tag == 34) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPSequenceVariableProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPSequenceVariableProto)
  return false;
#undef DO_
}

void CPSequenceVariableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPSequenceVariableProto)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 type_index = 2;
  if (has_type_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_index(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .operations_research.CPArgumentProto arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arguments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPSequenceVariableProto)
}

::google::protobuf::uint8* CPSequenceVariableProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPSequenceVariableProto)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 type_index = 2;
  if (has_type_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_index(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .operations_research.CPArgumentProto arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arguments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPSequenceVariableProto)
  return target;
}

int CPSequenceVariableProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type_index = 2;
    if (has_type_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_index());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .operations_research.CPArgumentProto arguments = 4;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPSequenceVariableProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPSequenceVariableProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPSequenceVariableProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPSequenceVariableProto::MergeFrom(const CPSequenceVariableProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type_index()) {
      set_type_index(from.type_index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPSequenceVariableProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPSequenceVariableProto::CopyFrom(const CPSequenceVariableProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPSequenceVariableProto::IsInitialized() const {

  return true;
}

void CPSequenceVariableProto::Swap(CPSequenceVariableProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_index_, other->type_index_);
    std::swap(name_, other->name_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPSequenceVariableProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPSequenceVariableProto_descriptor_;
  metadata.reflection = CPSequenceVariableProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPConstraintProto::kIndexFieldNumber;
const int CPConstraintProto::kTypeIndexFieldNumber;
const int CPConstraintProto::kNameFieldNumber;
const int CPConstraintProto::kArgumentsFieldNumber;
const int CPConstraintProto::kExtensionsFieldNumber;
#endif  // !_MSC_VER

CPConstraintProto::CPConstraintProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPConstraintProto)
}

void CPConstraintProto::InitAsDefaultInstance() {
}

CPConstraintProto::CPConstraintProto(const CPConstraintProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPConstraintProto)
}

void CPConstraintProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  type_index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPConstraintProto::~CPConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPConstraintProto)
  SharedDtor();
}

void CPConstraintProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CPConstraintProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPConstraintProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPConstraintProto_descriptor_;
}

const CPConstraintProto& CPConstraintProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPConstraintProto* CPConstraintProto::default_instance_ = NULL;

CPConstraintProto* CPConstraintProto::New() const {
  return new CPConstraintProto;
}

void CPConstraintProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPConstraintProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, type_index_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arguments_.Clear();
  extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPConstraintProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPConstraintProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_index;
        break;
      }

      // optional int32 type_index = 2;
      case 2: {
        if (tag == 16) {
         parse_type_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_index_)));
          set_has_type_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        break;
      }

      // repeated .operations_research.CPArgumentProto arguments = 4;
      case 4: {
        if (tag == 34) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        if (input->ExpectTag(42)) goto parse_extensions;
        break;
      }

      // repeated .operations_research.CPExtensionProto extensions = 5;
      case 5: {
        if (tag == 42) {
         parse_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extensions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extensions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPConstraintProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPConstraintProto)
  return false;
#undef DO_
}

void CPConstraintProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPConstraintProto)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 type_index = 2;
  if (has_type_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_index(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .operations_research.CPArgumentProto arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arguments(i), output);
  }

  // repeated .operations_research.CPExtensionProto extensions = 5;
  for (int i = 0; i < this->extensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->extensions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPConstraintProto)
}

::google::protobuf::uint8* CPConstraintProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPConstraintProto)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 type_index = 2;
  if (has_type_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_index(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .operations_research.CPArgumentProto arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arguments(i), target);
  }

  // repeated .operations_research.CPExtensionProto extensions = 5;
  for (int i = 0; i < this->extensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->extensions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPConstraintProto)
  return target;
}

int CPConstraintProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type_index = 2;
    if (has_type_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_index());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .operations_research.CPArgumentProto arguments = 4;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  // repeated .operations_research.CPExtensionProto extensions = 5;
  total_size += 1 * this->extensions_size();
  for (int i = 0; i < this->extensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extensions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPConstraintProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPConstraintProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPConstraintProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPConstraintProto::MergeFrom(const CPConstraintProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  extensions_.MergeFrom(from.extensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type_index()) {
      set_type_index(from.type_index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPConstraintProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPConstraintProto::CopyFrom(const CPConstraintProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPConstraintProto::IsInitialized() const {

  return true;
}

void CPConstraintProto::Swap(CPConstraintProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_index_, other->type_index_);
    std::swap(name_, other->name_);
    arguments_.Swap(&other->arguments_);
    extensions_.Swap(&other->extensions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPConstraintProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPConstraintProto_descriptor_;
  metadata.reflection = CPConstraintProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPObjectiveProto::kMaximizeFieldNumber;
const int CPObjectiveProto::kStepFieldNumber;
const int CPObjectiveProto::kObjectiveIndexFieldNumber;
#endif  // !_MSC_VER

CPObjectiveProto::CPObjectiveProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPObjectiveProto)
}

void CPObjectiveProto::InitAsDefaultInstance() {
}

CPObjectiveProto::CPObjectiveProto(const CPObjectiveProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPObjectiveProto)
}

void CPObjectiveProto::SharedCtor() {
  _cached_size_ = 0;
  maximize_ = false;
  step_ = GOOGLE_LONGLONG(0);
  objective_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPObjectiveProto::~CPObjectiveProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPObjectiveProto)
  SharedDtor();
}

void CPObjectiveProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPObjectiveProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPObjectiveProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPObjectiveProto_descriptor_;
}

const CPObjectiveProto& CPObjectiveProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPObjectiveProto* CPObjectiveProto::default_instance_ = NULL;

CPObjectiveProto* CPObjectiveProto::New() const {
  return new CPObjectiveProto;
}

void CPObjectiveProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPObjectiveProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(step_, objective_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPObjectiveProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPObjectiveProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool maximize = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maximize_)));
          set_has_maximize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional int64 step = 2;
      case 2: {
        if (tag == 16) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_objective_index;
        break;
      }

      // optional int32 objective_index = 3;
      case 3: {
        if (tag == 24) {
         parse_objective_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objective_index_)));
          set_has_objective_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPObjectiveProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPObjectiveProto)
  return false;
#undef DO_
}

void CPObjectiveProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPObjectiveProto)
  // optional bool maximize = 1;
  if (has_maximize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->maximize(), output);
  }

  // optional int64 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->step(), output);
  }

  // optional int32 objective_index = 3;
  if (has_objective_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objective_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPObjectiveProto)
}

::google::protobuf::uint8* CPObjectiveProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPObjectiveProto)
  // optional bool maximize = 1;
  if (has_maximize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->maximize(), target);
  }

  // optional int64 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->step(), target);
  }

  // optional int32 objective_index = 3;
  if (has_objective_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objective_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPObjectiveProto)
  return target;
}

int CPObjectiveProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool maximize = 1;
    if (has_maximize()) {
      total_size += 1 + 1;
    }

    // optional int64 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->step());
    }

    // optional int32 objective_index = 3;
    if (has_objective_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objective_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPObjectiveProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPObjectiveProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPObjectiveProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPObjectiveProto::MergeFrom(const CPObjectiveProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maximize()) {
      set_maximize(from.maximize());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_objective_index()) {
      set_objective_index(from.objective_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPObjectiveProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPObjectiveProto::CopyFrom(const CPObjectiveProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPObjectiveProto::IsInitialized() const {

  return true;
}

void CPObjectiveProto::Swap(CPObjectiveProto* other) {
  if (other != this) {
    std::swap(maximize_, other->maximize_);
    std::swap(step_, other->step_);
    std::swap(objective_index_, other->objective_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPObjectiveProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPObjectiveProto_descriptor_;
  metadata.reflection = CPObjectiveProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPVariableGroup::kArgumentsFieldNumber;
const int CPVariableGroup::kTypeFieldNumber;
#endif  // !_MSC_VER

CPVariableGroup::CPVariableGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPVariableGroup)
}

void CPVariableGroup::InitAsDefaultInstance() {
}

CPVariableGroup::CPVariableGroup(const CPVariableGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPVariableGroup)
}

void CPVariableGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPVariableGroup::~CPVariableGroup() {
  // @@protoc_insertion_point(destructor:operations_research.CPVariableGroup)
  SharedDtor();
}

void CPVariableGroup::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void CPVariableGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPVariableGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPVariableGroup_descriptor_;
}

const CPVariableGroup& CPVariableGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPVariableGroup* CPVariableGroup::default_instance_ = NULL;

CPVariableGroup* CPVariableGroup::New() const {
  return new CPVariableGroup;
}

void CPVariableGroup::Clear() {
  if (has_type()) {
    if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      type_->clear();
    }
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPVariableGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPVariableGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .operations_research.CPArgumentProto arguments = 1;
      case 1: {
        if (tag == 10) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_arguments;
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPVariableGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPVariableGroup)
  return false;
#undef DO_
}

void CPVariableGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPVariableGroup)
  // repeated .operations_research.CPArgumentProto arguments = 1;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arguments(i), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPVariableGroup)
}

::google::protobuf::uint8* CPVariableGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPVariableGroup)
  // repeated .operations_research.CPArgumentProto arguments = 1;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arguments(i), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPVariableGroup)
  return target;
}

int CPVariableGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  // repeated .operations_research.CPArgumentProto arguments = 1;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPVariableGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPVariableGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPVariableGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPVariableGroup::MergeFrom(const CPVariableGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPVariableGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPVariableGroup::CopyFrom(const CPVariableGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPVariableGroup::IsInitialized() const {

  return true;
}

void CPVariableGroup::Swap(CPVariableGroup* other) {
  if (other != this) {
    arguments_.Swap(&other->arguments_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPVariableGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPVariableGroup_descriptor_;
  metadata.reflection = CPVariableGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPModelProto::kModelFieldNumber;
const int CPModelProto::kVersionFieldNumber;
const int CPModelProto::kTagsFieldNumber;
const int CPModelProto::kExpressionsFieldNumber;
const int CPModelProto::kIntervalsFieldNumber;
const int CPModelProto::kSequencesFieldNumber;
const int CPModelProto::kConstraintsFieldNumber;
const int CPModelProto::kObjectiveFieldNumber;
const int CPModelProto::kSearchLimitFieldNumber;
const int CPModelProto::kVariableGroupsFieldNumber;
const int CPModelProto::kLicenseTextFieldNumber;
#endif  // !_MSC_VER

CPModelProto::CPModelProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.CPModelProto)
}

void CPModelProto::InitAsDefaultInstance() {
  objective_ = const_cast< ::operations_research::CPObjectiveProto*>(&::operations_research::CPObjectiveProto::default_instance());
  search_limit_ = const_cast< ::operations_research::SearchLimitProto*>(&::operations_research::SearchLimitProto::default_instance());
}

CPModelProto::CPModelProto(const CPModelProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.CPModelProto)
}

void CPModelProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  objective_ = NULL;
  search_limit_ = NULL;
  license_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPModelProto::~CPModelProto() {
  // @@protoc_insertion_point(destructor:operations_research.CPModelProto)
  SharedDtor();
}

void CPModelProto::SharedDtor() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (license_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete license_text_;
  }
  if (this != default_instance_) {
    delete objective_;
    delete search_limit_;
  }
}

void CPModelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPModelProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPModelProto_descriptor_;
}

const CPModelProto& CPModelProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  return *default_instance_;
}

CPModelProto* CPModelProto::default_instance_ = NULL;

CPModelProto* CPModelProto::New() const {
  return new CPModelProto;
}

void CPModelProto::Clear() {
  if (_has_bits_[0 / 32] & 131) {
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    version_ = 0;
    if (has_objective()) {
      if (objective_ != NULL) objective_->::operations_research::CPObjectiveProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1280) {
    if (has_search_limit()) {
      if (search_limit_ != NULL) search_limit_->::operations_research::SearchLimitProto::Clear();
    }
    if (has_license_text()) {
      if (license_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        license_text_->clear();
      }
    }
  }
  tags_.Clear();
  expressions_.Clear();
  intervals_.Clear();
  sequences_.Clear();
  constraints_.Clear();
  variable_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPModelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.CPModelProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        break;
      }

      // repeated string tags = 3;
      case 3: {
        if (tag == 26) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        if (input->ExpectTag(34)) goto parse_expressions;
        break;
      }

      // repeated .operations_research.CPIntegerExpressionProto expressions = 4;
      case 4: {
        if (tag == 34) {
         parse_expressions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expressions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_expressions;
        if (input->ExpectTag(42)) goto parse_intervals;
        break;
      }

      // repeated .operations_research.CPIntervalVariableProto intervals = 5;
      case 5: {
        if (tag == 42) {
         parse_intervals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intervals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_intervals;
        if (input->ExpectTag(50)) goto parse_sequences;
        break;
      }

      // repeated .operations_research.CPSequenceVariableProto sequences = 6;
      case 6: {
        if (tag == 50) {
         parse_sequences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sequences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sequences;
        if (input->ExpectTag(58)) goto parse_constraints;
        break;
      }

      // repeated .operations_research.CPConstraintProto constraints = 7;
      case 7: {
        if (tag == 58) {
         parse_constraints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_constraints;
        if (input->ExpectTag(66)) goto parse_objective;
        break;
      }

      // optional .operations_research.CPObjectiveProto objective = 8;
      case 8: {
        if (tag == 66) {
         parse_objective:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objective()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_search_limit;
        break;
      }

      // optional .operations_research.SearchLimitProto search_limit = 9;
      case 9: {
        if (tag == 74) {
         parse_search_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_variable_groups;
        break;
      }

      // repeated .operations_research.CPVariableGroup variable_groups = 10;
      case 10: {
        if (tag == 82) {
         parse_variable_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_variable_groups;
        if (input->ExpectTag(90)) goto parse_license_text;
        break;
      }

      // optional string license_text = 11;
      case 11: {
        if (tag == 90) {
         parse_license_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license_text().data(), this->license_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "license_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.CPModelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.CPModelProto)
  return false;
#undef DO_
}

void CPModelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.CPModelProto)
  // optional string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // repeated string tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // repeated .operations_research.CPIntegerExpressionProto expressions = 4;
  for (int i = 0; i < this->expressions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->expressions(i), output);
  }

  // repeated .operations_research.CPIntervalVariableProto intervals = 5;
  for (int i = 0; i < this->intervals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->intervals(i), output);
  }

  // repeated .operations_research.CPSequenceVariableProto sequences = 6;
  for (int i = 0; i < this->sequences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sequences(i), output);
  }

  // repeated .operations_research.CPConstraintProto constraints = 7;
  for (int i = 0; i < this->constraints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->constraints(i), output);
  }

  // optional .operations_research.CPObjectiveProto objective = 8;
  if (has_objective()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->objective(), output);
  }

  // optional .operations_research.SearchLimitProto search_limit = 9;
  if (has_search_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->search_limit(), output);
  }

  // repeated .operations_research.CPVariableGroup variable_groups = 10;
  for (int i = 0; i < this->variable_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->variable_groups(i), output);
  }

  // optional string license_text = 11;
  if (has_license_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_text().data(), this->license_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->license_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.CPModelProto)
}

::google::protobuf::uint8* CPModelProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CPModelProto)
  // optional string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  // optional int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // repeated string tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // repeated .operations_research.CPIntegerExpressionProto expressions = 4;
  for (int i = 0; i < this->expressions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->expressions(i), target);
  }

  // repeated .operations_research.CPIntervalVariableProto intervals = 5;
  for (int i = 0; i < this->intervals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->intervals(i), target);
  }

  // repeated .operations_research.CPSequenceVariableProto sequences = 6;
  for (int i = 0; i < this->sequences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sequences(i), target);
  }

  // repeated .operations_research.CPConstraintProto constraints = 7;
  for (int i = 0; i < this->constraints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->constraints(i), target);
  }

  // optional .operations_research.CPObjectiveProto objective = 8;
  if (has_objective()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->objective(), target);
  }

  // optional .operations_research.SearchLimitProto search_limit = 9;
  if (has_search_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->search_limit(), target);
  }

  // repeated .operations_research.CPVariableGroup variable_groups = 10;
  for (int i = 0; i < this->variable_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->variable_groups(i), target);
  }

  // optional string license_text = 11;
  if (has_license_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_text().data(), this->license_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->license_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CPModelProto)
  return target;
}

int CPModelProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .operations_research.CPObjectiveProto objective = 8;
    if (has_objective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objective());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .operations_research.SearchLimitProto search_limit = 9;
    if (has_search_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->search_limit());
    }

    // optional string license_text = 11;
    if (has_license_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_text());
    }

  }
  // repeated string tags = 3;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .operations_research.CPIntegerExpressionProto expressions = 4;
  total_size += 1 * this->expressions_size();
  for (int i = 0; i < this->expressions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expressions(i));
  }

  // repeated .operations_research.CPIntervalVariableProto intervals = 5;
  total_size += 1 * this->intervals_size();
  for (int i = 0; i < this->intervals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intervals(i));
  }

  // repeated .operations_research.CPSequenceVariableProto sequences = 6;
  total_size += 1 * this->sequences_size();
  for (int i = 0; i < this->sequences_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sequences(i));
  }

  // repeated .operations_research.CPConstraintProto constraints = 7;
  total_size += 1 * this->constraints_size();
  for (int i = 0; i < this->constraints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraints(i));
  }

  // repeated .operations_research.CPVariableGroup variable_groups = 10;
  total_size += 1 * this->variable_groups_size();
  for (int i = 0; i < this->variable_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable_groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPModelProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPModelProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPModelProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPModelProto::MergeFrom(const CPModelProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  expressions_.MergeFrom(from.expressions_);
  intervals_.MergeFrom(from.intervals_);
  sequences_.MergeFrom(from.sequences_);
  constraints_.MergeFrom(from.constraints_);
  variable_groups_.MergeFrom(from.variable_groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_objective()) {
      mutable_objective()->::operations_research::CPObjectiveProto::MergeFrom(from.objective());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_search_limit()) {
      mutable_search_limit()->::operations_research::SearchLimitProto::MergeFrom(from.search_limit());
    }
    if (from.has_license_text()) {
      set_license_text(from.license_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPModelProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPModelProto::CopyFrom(const CPModelProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPModelProto::IsInitialized() const {

  return true;
}

void CPModelProto::Swap(CPModelProto* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(version_, other->version_);
    tags_.Swap(&other->tags_);
    expressions_.Swap(&other->expressions_);
    intervals_.Swap(&other->intervals_);
    sequences_.Swap(&other->sequences_);
    constraints_.Swap(&other->constraints_);
    std::swap(objective_, other->objective_);
    std::swap(search_limit_, other->search_limit_);
    variable_groups_.Swap(&other->variable_groups_);
    std::swap(license_text_, other->license_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPModelProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPModelProto_descriptor_;
  metadata.reflection = CPModelProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
