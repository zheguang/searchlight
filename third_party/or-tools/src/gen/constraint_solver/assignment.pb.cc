// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: constraint_solver/assignment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "constraint_solver/assignment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace operations_research {

namespace {

const ::google::protobuf::Descriptor* IntVarAssignmentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntVarAssignmentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntervalVarAssignmentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntervalVarAssignmentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SequenceVarAssignmentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SequenceVarAssignmentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignmentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignmentProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_constraint_5fsolver_2fassignment_2eproto() {
  protobuf_AddDesc_constraint_5fsolver_2fassignment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "constraint_solver/assignment.proto");
  GOOGLE_CHECK(file != NULL);
  IntVarAssignmentProto_descriptor_ = file->message_type(0);
  static const int IntVarAssignmentProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVarAssignmentProto, var_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVarAssignmentProto, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVarAssignmentProto, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVarAssignmentProto, active_),
  };
  IntVarAssignmentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntVarAssignmentProto_descriptor_,
      IntVarAssignmentProto::default_instance_,
      IntVarAssignmentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVarAssignmentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVarAssignmentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntVarAssignmentProto));
  IntervalVarAssignmentProto_descriptor_ = file->message_type(1);
  static const int IntervalVarAssignmentProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, var_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, start_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, start_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, duration_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, duration_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, end_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, end_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, performed_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, performed_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, active_),
  };
  IntervalVarAssignmentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntervalVarAssignmentProto_descriptor_,
      IntervalVarAssignmentProto::default_instance_,
      IntervalVarAssignmentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntervalVarAssignmentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntervalVarAssignmentProto));
  SequenceVarAssignmentProto_descriptor_ = file->message_type(2);
  static const int SequenceVarAssignmentProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceVarAssignmentProto, var_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceVarAssignmentProto, forward_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceVarAssignmentProto, backward_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceVarAssignmentProto, unperformed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceVarAssignmentProto, active_),
  };
  SequenceVarAssignmentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SequenceVarAssignmentProto_descriptor_,
      SequenceVarAssignmentProto::default_instance_,
      SequenceVarAssignmentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceVarAssignmentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceVarAssignmentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SequenceVarAssignmentProto));
  WorkerInfo_descriptor_ = file->message_type(3);
  static const int WorkerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerInfo, worker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerInfo, bns_),
  };
  WorkerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerInfo_descriptor_,
      WorkerInfo::default_instance_,
      WorkerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerInfo));
  AssignmentProto_descriptor_ = file->message_type(4);
  static const int AssignmentProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignmentProto, int_var_assignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignmentProto, interval_var_assignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignmentProto, sequence_var_assignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignmentProto, objective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignmentProto, worker_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignmentProto, is_valid_),
  };
  AssignmentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignmentProto_descriptor_,
      AssignmentProto::default_instance_,
      AssignmentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignmentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignmentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignmentProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_constraint_5fsolver_2fassignment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntVarAssignmentProto_descriptor_, &IntVarAssignmentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntervalVarAssignmentProto_descriptor_, &IntervalVarAssignmentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SequenceVarAssignmentProto_descriptor_, &SequenceVarAssignmentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerInfo_descriptor_, &WorkerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignmentProto_descriptor_, &AssignmentProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_constraint_5fsolver_2fassignment_2eproto() {
  delete IntVarAssignmentProto::default_instance_;
  delete IntVarAssignmentProto_reflection_;
  delete IntervalVarAssignmentProto::default_instance_;
  delete IntervalVarAssignmentProto_reflection_;
  delete SequenceVarAssignmentProto::default_instance_;
  delete SequenceVarAssignmentProto_reflection_;
  delete WorkerInfo::default_instance_;
  delete WorkerInfo_reflection_;
  delete AssignmentProto::default_instance_;
  delete AssignmentProto_reflection_;
}

void protobuf_AddDesc_constraint_5fsolver_2fassignment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"constraint_solver/assignment.proto\022\023op"
    "erations_research\"W\n\025IntVarAssignmentPro"
    "to\022\016\n\006var_id\030\001 \001(\t\022\013\n\003min\030\002 \001(\003\022\013\n\003max\030\003"
    " \001(\003\022\024\n\006active\030\004 \001(\010:\004true\"\344\001\n\032IntervalV"
    "arAssignmentProto\022\016\n\006var_id\030\001 \001(\t\022\021\n\tsta"
    "rt_min\030\002 \001(\003\022\021\n\tstart_max\030\003 \001(\003\022\024\n\014durat"
    "ion_min\030\004 \001(\003\022\024\n\014duration_max\030\005 \001(\003\022\017\n\007e"
    "nd_min\030\006 \001(\003\022\017\n\007end_max\030\007 \001(\003\022\025\n\rperform"
    "ed_min\030\010 \001(\003\022\025\n\rperformed_max\030\t \001(\003\022\024\n\006a"
    "ctive\030\n \001(\010:\004true\"\214\001\n\032SequenceVarAssignm"
    "entProto\022\016\n\006var_id\030\001 \001(\t\022\030\n\020forward_sequ"
    "ence\030\002 \003(\005\022\031\n\021backward_sequence\030\003 \003(\005\022\023\n"
    "\013unperformed\030\004 \003(\005\022\024\n\006active\030\005 \001(\010:\004true"
    "\",\n\nWorkerInfo\022\021\n\tworker_id\030\001 \001(\005\022\013\n\003bns"
    "\030\002 \001(\t\"\212\003\n\017AssignmentProto\022F\n\022int_var_as"
    "signment\030\001 \003(\0132*.operations_research.Int"
    "VarAssignmentProto\022P\n\027interval_var_assig"
    "nment\030\002 \003(\0132/.operations_research.Interv"
    "alVarAssignmentProto\022P\n\027sequence_var_ass"
    "ignment\030\006 \003(\0132/.operations_research.Sequ"
    "enceVarAssignmentProto\022=\n\tobjective\030\003 \001("
    "\0132*.operations_research.IntVarAssignment"
    "Proto\0224\n\013worker_info\030\004 \001(\0132\037.operations_"
    "research.WorkerInfo\022\026\n\010is_valid\030\005 \001(\010:\004t"
    "rue", 963);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "constraint_solver/assignment.proto", &protobuf_RegisterTypes);
  IntVarAssignmentProto::default_instance_ = new IntVarAssignmentProto();
  IntervalVarAssignmentProto::default_instance_ = new IntervalVarAssignmentProto();
  SequenceVarAssignmentProto::default_instance_ = new SequenceVarAssignmentProto();
  WorkerInfo::default_instance_ = new WorkerInfo();
  AssignmentProto::default_instance_ = new AssignmentProto();
  IntVarAssignmentProto::default_instance_->InitAsDefaultInstance();
  IntervalVarAssignmentProto::default_instance_->InitAsDefaultInstance();
  SequenceVarAssignmentProto::default_instance_->InitAsDefaultInstance();
  WorkerInfo::default_instance_->InitAsDefaultInstance();
  AssignmentProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_constraint_5fsolver_2fassignment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_constraint_5fsolver_2fassignment_2eproto {
  StaticDescriptorInitializer_constraint_5fsolver_2fassignment_2eproto() {
    protobuf_AddDesc_constraint_5fsolver_2fassignment_2eproto();
  }
} static_descriptor_initializer_constraint_5fsolver_2fassignment_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IntVarAssignmentProto::kVarIdFieldNumber;
const int IntVarAssignmentProto::kMinFieldNumber;
const int IntVarAssignmentProto::kMaxFieldNumber;
const int IntVarAssignmentProto::kActiveFieldNumber;
#endif  // !_MSC_VER

IntVarAssignmentProto::IntVarAssignmentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.IntVarAssignmentProto)
}

void IntVarAssignmentProto::InitAsDefaultInstance() {
}

IntVarAssignmentProto::IntVarAssignmentProto(const IntVarAssignmentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.IntVarAssignmentProto)
}

void IntVarAssignmentProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  var_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_ = GOOGLE_LONGLONG(0);
  max_ = GOOGLE_LONGLONG(0);
  active_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntVarAssignmentProto::~IntVarAssignmentProto() {
  // @@protoc_insertion_point(destructor:operations_research.IntVarAssignmentProto)
  SharedDtor();
}

void IntVarAssignmentProto::SharedDtor() {
  if (var_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_id_;
  }
  if (this != default_instance_) {
  }
}

void IntVarAssignmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntVarAssignmentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntVarAssignmentProto_descriptor_;
}

const IntVarAssignmentProto& IntVarAssignmentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fassignment_2eproto();
  return *default_instance_;
}

IntVarAssignmentProto* IntVarAssignmentProto::default_instance_ = NULL;

IntVarAssignmentProto* IntVarAssignmentProto::New() const {
  return new IntVarAssignmentProto;
}

void IntVarAssignmentProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IntVarAssignmentProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(min_, max_);
    if (has_var_id()) {
      if (var_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        var_id_->clear();
      }
    }
    active_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntVarAssignmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.IntVarAssignmentProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string var_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->var_id().data(), this->var_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "var_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min;
        break;
      }

      // optional int64 min = 2;
      case 2: {
        if (tag == 16) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max;
        break;
      }

      // optional int64 max = 3;
      case 3: {
        if (tag == 24) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }

      // optional bool active = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.IntVarAssignmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.IntVarAssignmentProto)
  return false;
#undef DO_
}

void IntVarAssignmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.IntVarAssignmentProto)
  // optional string var_id = 1;
  if (has_var_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_id().data(), this->var_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->var_id(), output);
  }

  // optional int64 min = 2;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->min(), output);
  }

  // optional int64 max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max(), output);
  }

  // optional bool active = 4 [default = true];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.IntVarAssignmentProto)
}

::google::protobuf::uint8* IntVarAssignmentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.IntVarAssignmentProto)
  // optional string var_id = 1;
  if (has_var_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_id().data(), this->var_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var_id(), target);
  }

  // optional int64 min = 2;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->min(), target);
  }

  // optional int64 max = 3;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max(), target);
  }

  // optional bool active = 4 [default = true];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.IntVarAssignmentProto)
  return target;
}

int IntVarAssignmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string var_id = 1;
    if (has_var_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_id());
    }

    // optional int64 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min());
    }

    // optional int64 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max());
    }

    // optional bool active = 4 [default = true];
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntVarAssignmentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntVarAssignmentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntVarAssignmentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntVarAssignmentProto::MergeFrom(const IntVarAssignmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_id()) {
      set_var_id(from.var_id());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntVarAssignmentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVarAssignmentProto::CopyFrom(const IntVarAssignmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVarAssignmentProto::IsInitialized() const {

  return true;
}

void IntVarAssignmentProto::Swap(IntVarAssignmentProto* other) {
  if (other != this) {
    std::swap(var_id_, other->var_id_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntVarAssignmentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntVarAssignmentProto_descriptor_;
  metadata.reflection = IntVarAssignmentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntervalVarAssignmentProto::kVarIdFieldNumber;
const int IntervalVarAssignmentProto::kStartMinFieldNumber;
const int IntervalVarAssignmentProto::kStartMaxFieldNumber;
const int IntervalVarAssignmentProto::kDurationMinFieldNumber;
const int IntervalVarAssignmentProto::kDurationMaxFieldNumber;
const int IntervalVarAssignmentProto::kEndMinFieldNumber;
const int IntervalVarAssignmentProto::kEndMaxFieldNumber;
const int IntervalVarAssignmentProto::kPerformedMinFieldNumber;
const int IntervalVarAssignmentProto::kPerformedMaxFieldNumber;
const int IntervalVarAssignmentProto::kActiveFieldNumber;
#endif  // !_MSC_VER

IntervalVarAssignmentProto::IntervalVarAssignmentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.IntervalVarAssignmentProto)
}

void IntervalVarAssignmentProto::InitAsDefaultInstance() {
}

IntervalVarAssignmentProto::IntervalVarAssignmentProto(const IntervalVarAssignmentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.IntervalVarAssignmentProto)
}

void IntervalVarAssignmentProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  var_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_min_ = GOOGLE_LONGLONG(0);
  start_max_ = GOOGLE_LONGLONG(0);
  duration_min_ = GOOGLE_LONGLONG(0);
  duration_max_ = GOOGLE_LONGLONG(0);
  end_min_ = GOOGLE_LONGLONG(0);
  end_max_ = GOOGLE_LONGLONG(0);
  performed_min_ = GOOGLE_LONGLONG(0);
  performed_max_ = GOOGLE_LONGLONG(0);
  active_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntervalVarAssignmentProto::~IntervalVarAssignmentProto() {
  // @@protoc_insertion_point(destructor:operations_research.IntervalVarAssignmentProto)
  SharedDtor();
}

void IntervalVarAssignmentProto::SharedDtor() {
  if (var_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_id_;
  }
  if (this != default_instance_) {
  }
}

void IntervalVarAssignmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntervalVarAssignmentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntervalVarAssignmentProto_descriptor_;
}

const IntervalVarAssignmentProto& IntervalVarAssignmentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fassignment_2eproto();
  return *default_instance_;
}

IntervalVarAssignmentProto* IntervalVarAssignmentProto::default_instance_ = NULL;

IntervalVarAssignmentProto* IntervalVarAssignmentProto::New() const {
  return new IntervalVarAssignmentProto;
}

void IntervalVarAssignmentProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IntervalVarAssignmentProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(start_min_, performed_min_);
    if (has_var_id()) {
      if (var_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        var_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    performed_max_ = GOOGLE_LONGLONG(0);
    active_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntervalVarAssignmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.IntervalVarAssignmentProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string var_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->var_id().data(), this->var_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "var_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_min;
        break;
      }

      // optional int64 start_min = 2;
      case 2: {
        if (tag == 16) {
         parse_start_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_min_)));
          set_has_start_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_max;
        break;
      }

      // optional int64 start_max = 3;
      case 3: {
        if (tag == 24) {
         parse_start_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_max_)));
          set_has_start_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duration_min;
        break;
      }

      // optional int64 duration_min = 4;
      case 4: {
        if (tag == 32) {
         parse_duration_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_min_)));
          set_has_duration_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_duration_max;
        break;
      }

      // optional int64 duration_max = 5;
      case 5: {
        if (tag == 40) {
         parse_duration_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_max_)));
          set_has_duration_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_min;
        break;
      }

      // optional int64 end_min = 6;
      case 6: {
        if (tag == 48) {
         parse_end_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_min_)));
          set_has_end_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_end_max;
        break;
      }

      // optional int64 end_max = 7;
      case 7: {
        if (tag == 56) {
         parse_end_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_max_)));
          set_has_end_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_performed_min;
        break;
      }

      // optional int64 performed_min = 8;
      case 8: {
        if (tag == 64) {
         parse_performed_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &performed_min_)));
          set_has_performed_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_performed_max;
        break;
      }

      // optional int64 performed_max = 9;
      case 9: {
        if (tag == 72) {
         parse_performed_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &performed_max_)));
          set_has_performed_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_active;
        break;
      }

      // optional bool active = 10 [default = true];
      case 10: {
        if (tag == 80) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.IntervalVarAssignmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.IntervalVarAssignmentProto)
  return false;
#undef DO_
}

void IntervalVarAssignmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.IntervalVarAssignmentProto)
  // optional string var_id = 1;
  if (has_var_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_id().data(), this->var_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->var_id(), output);
  }

  // optional int64 start_min = 2;
  if (has_start_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_min(), output);
  }

  // optional int64 start_max = 3;
  if (has_start_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_max(), output);
  }

  // optional int64 duration_min = 4;
  if (has_duration_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->duration_min(), output);
  }

  // optional int64 duration_max = 5;
  if (has_duration_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->duration_max(), output);
  }

  // optional int64 end_min = 6;
  if (has_end_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_min(), output);
  }

  // optional int64 end_max = 7;
  if (has_end_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->end_max(), output);
  }

  // optional int64 performed_min = 8;
  if (has_performed_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->performed_min(), output);
  }

  // optional int64 performed_max = 9;
  if (has_performed_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->performed_max(), output);
  }

  // optional bool active = 10 [default = true];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.IntervalVarAssignmentProto)
}

::google::protobuf::uint8* IntervalVarAssignmentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.IntervalVarAssignmentProto)
  // optional string var_id = 1;
  if (has_var_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_id().data(), this->var_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var_id(), target);
  }

  // optional int64 start_min = 2;
  if (has_start_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_min(), target);
  }

  // optional int64 start_max = 3;
  if (has_start_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_max(), target);
  }

  // optional int64 duration_min = 4;
  if (has_duration_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->duration_min(), target);
  }

  // optional int64 duration_max = 5;
  if (has_duration_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->duration_max(), target);
  }

  // optional int64 end_min = 6;
  if (has_end_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_min(), target);
  }

  // optional int64 end_max = 7;
  if (has_end_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->end_max(), target);
  }

  // optional int64 performed_min = 8;
  if (has_performed_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->performed_min(), target);
  }

  // optional int64 performed_max = 9;
  if (has_performed_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->performed_max(), target);
  }

  // optional bool active = 10 [default = true];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.IntervalVarAssignmentProto)
  return target;
}

int IntervalVarAssignmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string var_id = 1;
    if (has_var_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_id());
    }

    // optional int64 start_min = 2;
    if (has_start_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_min());
    }

    // optional int64 start_max = 3;
    if (has_start_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_max());
    }

    // optional int64 duration_min = 4;
    if (has_duration_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration_min());
    }

    // optional int64 duration_max = 5;
    if (has_duration_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration_max());
    }

    // optional int64 end_min = 6;
    if (has_end_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_min());
    }

    // optional int64 end_max = 7;
    if (has_end_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_max());
    }

    // optional int64 performed_min = 8;
    if (has_performed_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->performed_min());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 performed_max = 9;
    if (has_performed_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->performed_max());
    }

    // optional bool active = 10 [default = true];
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntervalVarAssignmentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntervalVarAssignmentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntervalVarAssignmentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntervalVarAssignmentProto::MergeFrom(const IntervalVarAssignmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_id()) {
      set_var_id(from.var_id());
    }
    if (from.has_start_min()) {
      set_start_min(from.start_min());
    }
    if (from.has_start_max()) {
      set_start_max(from.start_max());
    }
    if (from.has_duration_min()) {
      set_duration_min(from.duration_min());
    }
    if (from.has_duration_max()) {
      set_duration_max(from.duration_max());
    }
    if (from.has_end_min()) {
      set_end_min(from.end_min());
    }
    if (from.has_end_max()) {
      set_end_max(from.end_max());
    }
    if (from.has_performed_min()) {
      set_performed_min(from.performed_min());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_performed_max()) {
      set_performed_max(from.performed_max());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntervalVarAssignmentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalVarAssignmentProto::CopyFrom(const IntervalVarAssignmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalVarAssignmentProto::IsInitialized() const {

  return true;
}

void IntervalVarAssignmentProto::Swap(IntervalVarAssignmentProto* other) {
  if (other != this) {
    std::swap(var_id_, other->var_id_);
    std::swap(start_min_, other->start_min_);
    std::swap(start_max_, other->start_max_);
    std::swap(duration_min_, other->duration_min_);
    std::swap(duration_max_, other->duration_max_);
    std::swap(end_min_, other->end_min_);
    std::swap(end_max_, other->end_max_);
    std::swap(performed_min_, other->performed_min_);
    std::swap(performed_max_, other->performed_max_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntervalVarAssignmentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntervalVarAssignmentProto_descriptor_;
  metadata.reflection = IntervalVarAssignmentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SequenceVarAssignmentProto::kVarIdFieldNumber;
const int SequenceVarAssignmentProto::kForwardSequenceFieldNumber;
const int SequenceVarAssignmentProto::kBackwardSequenceFieldNumber;
const int SequenceVarAssignmentProto::kUnperformedFieldNumber;
const int SequenceVarAssignmentProto::kActiveFieldNumber;
#endif  // !_MSC_VER

SequenceVarAssignmentProto::SequenceVarAssignmentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.SequenceVarAssignmentProto)
}

void SequenceVarAssignmentProto::InitAsDefaultInstance() {
}

SequenceVarAssignmentProto::SequenceVarAssignmentProto(const SequenceVarAssignmentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.SequenceVarAssignmentProto)
}

void SequenceVarAssignmentProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  var_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SequenceVarAssignmentProto::~SequenceVarAssignmentProto() {
  // @@protoc_insertion_point(destructor:operations_research.SequenceVarAssignmentProto)
  SharedDtor();
}

void SequenceVarAssignmentProto::SharedDtor() {
  if (var_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_id_;
  }
  if (this != default_instance_) {
  }
}

void SequenceVarAssignmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SequenceVarAssignmentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SequenceVarAssignmentProto_descriptor_;
}

const SequenceVarAssignmentProto& SequenceVarAssignmentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fassignment_2eproto();
  return *default_instance_;
}

SequenceVarAssignmentProto* SequenceVarAssignmentProto::default_instance_ = NULL;

SequenceVarAssignmentProto* SequenceVarAssignmentProto::New() const {
  return new SequenceVarAssignmentProto;
}

void SequenceVarAssignmentProto::Clear() {
  if (_has_bits_[0 / 32] & 17) {
    if (has_var_id()) {
      if (var_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        var_id_->clear();
      }
    }
    active_ = true;
  }
  forward_sequence_.Clear();
  backward_sequence_.Clear();
  unperformed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SequenceVarAssignmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.SequenceVarAssignmentProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string var_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->var_id().data(), this->var_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "var_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_forward_sequence;
        break;
      }

      // repeated int32 forward_sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_forward_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_forward_sequence())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_forward_sequence())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_forward_sequence;
        if (input->ExpectTag(24)) goto parse_backward_sequence;
        break;
      }

      // repeated int32 backward_sequence = 3;
      case 3: {
        if (tag == 24) {
         parse_backward_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_backward_sequence())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_backward_sequence())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_backward_sequence;
        if (input->ExpectTag(32)) goto parse_unperformed;
        break;
      }

      // repeated int32 unperformed = 4;
      case 4: {
        if (tag == 32) {
         parse_unperformed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_unperformed())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unperformed())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unperformed;
        if (input->ExpectTag(40)) goto parse_active;
        break;
      }

      // optional bool active = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.SequenceVarAssignmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.SequenceVarAssignmentProto)
  return false;
#undef DO_
}

void SequenceVarAssignmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.SequenceVarAssignmentProto)
  // optional string var_id = 1;
  if (has_var_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_id().data(), this->var_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->var_id(), output);
  }

  // repeated int32 forward_sequence = 2;
  for (int i = 0; i < this->forward_sequence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->forward_sequence(i), output);
  }

  // repeated int32 backward_sequence = 3;
  for (int i = 0; i < this->backward_sequence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->backward_sequence(i), output);
  }

  // repeated int32 unperformed = 4;
  for (int i = 0; i < this->unperformed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->unperformed(i), output);
  }

  // optional bool active = 5 [default = true];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.SequenceVarAssignmentProto)
}

::google::protobuf::uint8* SequenceVarAssignmentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.SequenceVarAssignmentProto)
  // optional string var_id = 1;
  if (has_var_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_id().data(), this->var_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var_id(), target);
  }

  // repeated int32 forward_sequence = 2;
  for (int i = 0; i < this->forward_sequence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->forward_sequence(i), target);
  }

  // repeated int32 backward_sequence = 3;
  for (int i = 0; i < this->backward_sequence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->backward_sequence(i), target);
  }

  // repeated int32 unperformed = 4;
  for (int i = 0; i < this->unperformed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->unperformed(i), target);
  }

  // optional bool active = 5 [default = true];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.SequenceVarAssignmentProto)
  return target;
}

int SequenceVarAssignmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string var_id = 1;
    if (has_var_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_id());
    }

    // optional bool active = 5 [default = true];
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 forward_sequence = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->forward_sequence_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->forward_sequence(i));
    }
    total_size += 1 * this->forward_sequence_size() + data_size;
  }

  // repeated int32 backward_sequence = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->backward_sequence_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->backward_sequence(i));
    }
    total_size += 1 * this->backward_sequence_size() + data_size;
  }

  // repeated int32 unperformed = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->unperformed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unperformed(i));
    }
    total_size += 1 * this->unperformed_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SequenceVarAssignmentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SequenceVarAssignmentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SequenceVarAssignmentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SequenceVarAssignmentProto::MergeFrom(const SequenceVarAssignmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  forward_sequence_.MergeFrom(from.forward_sequence_);
  backward_sequence_.MergeFrom(from.backward_sequence_);
  unperformed_.MergeFrom(from.unperformed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_id()) {
      set_var_id(from.var_id());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SequenceVarAssignmentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceVarAssignmentProto::CopyFrom(const SequenceVarAssignmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceVarAssignmentProto::IsInitialized() const {

  return true;
}

void SequenceVarAssignmentProto::Swap(SequenceVarAssignmentProto* other) {
  if (other != this) {
    std::swap(var_id_, other->var_id_);
    forward_sequence_.Swap(&other->forward_sequence_);
    backward_sequence_.Swap(&other->backward_sequence_);
    unperformed_.Swap(&other->unperformed_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SequenceVarAssignmentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SequenceVarAssignmentProto_descriptor_;
  metadata.reflection = SequenceVarAssignmentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkerInfo::kWorkerIdFieldNumber;
const int WorkerInfo::kBnsFieldNumber;
#endif  // !_MSC_VER

WorkerInfo::WorkerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.WorkerInfo)
}

void WorkerInfo::InitAsDefaultInstance() {
}

WorkerInfo::WorkerInfo(const WorkerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.WorkerInfo)
}

void WorkerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  worker_id_ = 0;
  bns_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerInfo::~WorkerInfo() {
  // @@protoc_insertion_point(destructor:operations_research.WorkerInfo)
  SharedDtor();
}

void WorkerInfo::SharedDtor() {
  if (bns_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bns_;
  }
  if (this != default_instance_) {
  }
}

void WorkerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerInfo_descriptor_;
}

const WorkerInfo& WorkerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fassignment_2eproto();
  return *default_instance_;
}

WorkerInfo* WorkerInfo::default_instance_ = NULL;

WorkerInfo* WorkerInfo::New() const {
  return new WorkerInfo;
}

void WorkerInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    worker_id_ = 0;
    if (has_bns()) {
      if (bns_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bns_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.WorkerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 worker_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_id_)));
          set_has_worker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bns;
        break;
      }

      // optional string bns = 2;
      case 2: {
        if (tag == 18) {
         parse_bns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bns()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bns().data(), this->bns().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bns");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.WorkerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.WorkerInfo)
  return false;
#undef DO_
}

void WorkerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.WorkerInfo)
  // optional int32 worker_id = 1;
  if (has_worker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->worker_id(), output);
  }

  // optional string bns = 2;
  if (has_bns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bns().data(), this->bns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bns(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.WorkerInfo)
}

::google::protobuf::uint8* WorkerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.WorkerInfo)
  // optional int32 worker_id = 1;
  if (has_worker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->worker_id(), target);
  }

  // optional string bns = 2;
  if (has_bns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bns().data(), this->bns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bns(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.WorkerInfo)
  return target;
}

int WorkerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 worker_id = 1;
    if (has_worker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_id());
    }

    // optional string bns = 2;
    if (has_bns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bns());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerInfo::MergeFrom(const WorkerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worker_id()) {
      set_worker_id(from.worker_id());
    }
    if (from.has_bns()) {
      set_bns(from.bns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerInfo::CopyFrom(const WorkerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerInfo::IsInitialized() const {

  return true;
}

void WorkerInfo::Swap(WorkerInfo* other) {
  if (other != this) {
    std::swap(worker_id_, other->worker_id_);
    std::swap(bns_, other->bns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerInfo_descriptor_;
  metadata.reflection = WorkerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignmentProto::kIntVarAssignmentFieldNumber;
const int AssignmentProto::kIntervalVarAssignmentFieldNumber;
const int AssignmentProto::kSequenceVarAssignmentFieldNumber;
const int AssignmentProto::kObjectiveFieldNumber;
const int AssignmentProto::kWorkerInfoFieldNumber;
const int AssignmentProto::kIsValidFieldNumber;
#endif  // !_MSC_VER

AssignmentProto::AssignmentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.AssignmentProto)
}

void AssignmentProto::InitAsDefaultInstance() {
  objective_ = const_cast< ::operations_research::IntVarAssignmentProto*>(&::operations_research::IntVarAssignmentProto::default_instance());
  worker_info_ = const_cast< ::operations_research::WorkerInfo*>(&::operations_research::WorkerInfo::default_instance());
}

AssignmentProto::AssignmentProto(const AssignmentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.AssignmentProto)
}

void AssignmentProto::SharedCtor() {
  _cached_size_ = 0;
  objective_ = NULL;
  worker_info_ = NULL;
  is_valid_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignmentProto::~AssignmentProto() {
  // @@protoc_insertion_point(destructor:operations_research.AssignmentProto)
  SharedDtor();
}

void AssignmentProto::SharedDtor() {
  if (this != default_instance_) {
    delete objective_;
    delete worker_info_;
  }
}

void AssignmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignmentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignmentProto_descriptor_;
}

const AssignmentProto& AssignmentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fsolver_2fassignment_2eproto();
  return *default_instance_;
}

AssignmentProto* AssignmentProto::default_instance_ = NULL;

AssignmentProto* AssignmentProto::New() const {
  return new AssignmentProto;
}

void AssignmentProto::Clear() {
  if (_has_bits_[0 / 32] & 56) {
    if (has_objective()) {
      if (objective_ != NULL) objective_->::operations_research::IntVarAssignmentProto::Clear();
    }
    if (has_worker_info()) {
      if (worker_info_ != NULL) worker_info_->::operations_research::WorkerInfo::Clear();
    }
    is_valid_ = true;
  }
  int_var_assignment_.Clear();
  interval_var_assignment_.Clear();
  sequence_var_assignment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.AssignmentProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .operations_research.IntVarAssignmentProto int_var_assignment = 1;
      case 1: {
        if (tag == 10) {
         parse_int_var_assignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_int_var_assignment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_int_var_assignment;
        if (input->ExpectTag(18)) goto parse_interval_var_assignment;
        break;
      }

      // repeated .operations_research.IntervalVarAssignmentProto interval_var_assignment = 2;
      case 2: {
        if (tag == 18) {
         parse_interval_var_assignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interval_var_assignment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_interval_var_assignment;
        if (input->ExpectTag(26)) goto parse_objective;
        break;
      }

      // optional .operations_research.IntVarAssignmentProto objective = 3;
      case 3: {
        if (tag == 26) {
         parse_objective:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objective()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_worker_info;
        break;
      }

      // optional .operations_research.WorkerInfo worker_info = 4;
      case 4: {
        if (tag == 34) {
         parse_worker_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_valid;
        break;
      }

      // optional bool is_valid = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
          set_has_is_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sequence_var_assignment;
        break;
      }

      // repeated .operations_research.SequenceVarAssignmentProto sequence_var_assignment = 6;
      case 6: {
        if (tag == 50) {
         parse_sequence_var_assignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sequence_var_assignment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sequence_var_assignment;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.AssignmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.AssignmentProto)
  return false;
#undef DO_
}

void AssignmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.AssignmentProto)
  // repeated .operations_research.IntVarAssignmentProto int_var_assignment = 1;
  for (int i = 0; i < this->int_var_assignment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->int_var_assignment(i), output);
  }

  // repeated .operations_research.IntervalVarAssignmentProto interval_var_assignment = 2;
  for (int i = 0; i < this->interval_var_assignment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->interval_var_assignment(i), output);
  }

  // optional .operations_research.IntVarAssignmentProto objective = 3;
  if (has_objective()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objective(), output);
  }

  // optional .operations_research.WorkerInfo worker_info = 4;
  if (has_worker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->worker_info(), output);
  }

  // optional bool is_valid = 5 [default = true];
  if (has_is_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_valid(), output);
  }

  // repeated .operations_research.SequenceVarAssignmentProto sequence_var_assignment = 6;
  for (int i = 0; i < this->sequence_var_assignment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sequence_var_assignment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.AssignmentProto)
}

::google::protobuf::uint8* AssignmentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.AssignmentProto)
  // repeated .operations_research.IntVarAssignmentProto int_var_assignment = 1;
  for (int i = 0; i < this->int_var_assignment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->int_var_assignment(i), target);
  }

  // repeated .operations_research.IntervalVarAssignmentProto interval_var_assignment = 2;
  for (int i = 0; i < this->interval_var_assignment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->interval_var_assignment(i), target);
  }

  // optional .operations_research.IntVarAssignmentProto objective = 3;
  if (has_objective()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objective(), target);
  }

  // optional .operations_research.WorkerInfo worker_info = 4;
  if (has_worker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->worker_info(), target);
  }

  // optional bool is_valid = 5 [default = true];
  if (has_is_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_valid(), target);
  }

  // repeated .operations_research.SequenceVarAssignmentProto sequence_var_assignment = 6;
  for (int i = 0; i < this->sequence_var_assignment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sequence_var_assignment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.AssignmentProto)
  return target;
}

int AssignmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .operations_research.IntVarAssignmentProto objective = 3;
    if (has_objective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objective());
    }

    // optional .operations_research.WorkerInfo worker_info = 4;
    if (has_worker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker_info());
    }

    // optional bool is_valid = 5 [default = true];
    if (has_is_valid()) {
      total_size += 1 + 1;
    }

  }
  // repeated .operations_research.IntVarAssignmentProto int_var_assignment = 1;
  total_size += 1 * this->int_var_assignment_size();
  for (int i = 0; i < this->int_var_assignment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->int_var_assignment(i));
  }

  // repeated .operations_research.IntervalVarAssignmentProto interval_var_assignment = 2;
  total_size += 1 * this->interval_var_assignment_size();
  for (int i = 0; i < this->interval_var_assignment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interval_var_assignment(i));
  }

  // repeated .operations_research.SequenceVarAssignmentProto sequence_var_assignment = 6;
  total_size += 1 * this->sequence_var_assignment_size();
  for (int i = 0; i < this->sequence_var_assignment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sequence_var_assignment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignmentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignmentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignmentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignmentProto::MergeFrom(const AssignmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  int_var_assignment_.MergeFrom(from.int_var_assignment_);
  interval_var_assignment_.MergeFrom(from.interval_var_assignment_);
  sequence_var_assignment_.MergeFrom(from.sequence_var_assignment_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_objective()) {
      mutable_objective()->::operations_research::IntVarAssignmentProto::MergeFrom(from.objective());
    }
    if (from.has_worker_info()) {
      mutable_worker_info()->::operations_research::WorkerInfo::MergeFrom(from.worker_info());
    }
    if (from.has_is_valid()) {
      set_is_valid(from.is_valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignmentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignmentProto::CopyFrom(const AssignmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignmentProto::IsInitialized() const {

  return true;
}

void AssignmentProto::Swap(AssignmentProto* other) {
  if (other != this) {
    int_var_assignment_.Swap(&other->int_var_assignment_);
    interval_var_assignment_.Swap(&other->interval_var_assignment_);
    sequence_var_assignment_.Swap(&other->sequence_var_assignment_);
    std::swap(objective_, other->objective_);
    std::swap(worker_info_, other->worker_info_);
    std::swap(is_valid_, other->is_valid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignmentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignmentProto_descriptor_;
  metadata.reflection = AssignmentProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
