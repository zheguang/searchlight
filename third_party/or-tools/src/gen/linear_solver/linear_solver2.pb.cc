// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linear_solver/linear_solver2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "linear_solver/linear_solver2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace operations_research {
namespace new_proto {

namespace {

const ::google::protobuf::Descriptor* MPVariableProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MPVariableProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MPConstraintProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MPConstraintProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MPConstraintProto_UnaryTerm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MPConstraintProto_UnaryTerm_reflection_ = NULL;
const ::google::protobuf::Descriptor* MPModelProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MPModelProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MPModelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MPModelRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MPModelRequest_SolverType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MPSolutionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MPSolutionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MPSolutionResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_Code_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_linear_5fsolver_2flinear_5fsolver2_2eproto() {
  protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "linear_solver/linear_solver2.proto");
  GOOGLE_CHECK(file != NULL);
  MPVariableProto_descriptor_ = file->message_type(0);
  static const int MPVariableProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPVariableProto, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPVariableProto, upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPVariableProto, objective_coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPVariableProto, is_integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPVariableProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPVariableProto, can_also_be_zero_),
  };
  MPVariableProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MPVariableProto_descriptor_,
      MPVariableProto::default_instance_,
      MPVariableProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPVariableProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPVariableProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MPVariableProto));
  MPConstraintProto_descriptor_ = file->message_type(1);
  static const int MPConstraintProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, var_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, linear_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, is_lazy_),
  };
  MPConstraintProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MPConstraintProto_descriptor_,
      MPConstraintProto::default_instance_,
      MPConstraintProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MPConstraintProto));
  MPConstraintProto_UnaryTerm_descriptor_ = MPConstraintProto_descriptor_->nested_type(0);
  static const int MPConstraintProto_UnaryTerm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto_UnaryTerm, var_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto_UnaryTerm, coefficient_),
  };
  MPConstraintProto_UnaryTerm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MPConstraintProto_UnaryTerm_descriptor_,
      MPConstraintProto_UnaryTerm::default_instance_,
      MPConstraintProto_UnaryTerm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto_UnaryTerm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPConstraintProto_UnaryTerm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MPConstraintProto_UnaryTerm));
  MPModelProto_descriptor_ = file->message_type(2);
  static const int MPModelProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelProto, maximize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelProto, objective_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelProto, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelProto, constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelProto, name_),
  };
  MPModelProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MPModelProto_descriptor_,
      MPModelProto::default_instance_,
      MPModelProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MPModelProto));
  MPModelRequest_descriptor_ = file->message_type(3);
  static const int MPModelRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelRequest, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelRequest, solver_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelRequest, solver_time_limit_seconds_),
  };
  MPModelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MPModelRequest_descriptor_,
      MPModelRequest::default_instance_,
      MPModelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPModelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MPModelRequest));
  MPModelRequest_SolverType_descriptor_ = MPModelRequest_descriptor_->enum_type(0);
  MPSolutionResponse_descriptor_ = file->message_type(4);
  static const int MPSolutionResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSolutionResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSolutionResponse, objective_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSolutionResponse, variable_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSolutionResponse, dual_value_),
  };
  MPSolutionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MPSolutionResponse_descriptor_,
      MPSolutionResponse::default_instance_,
      MPSolutionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSolutionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSolutionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MPSolutionResponse));
  MPSolutionResponse_Status_descriptor_ = MPSolutionResponse_descriptor_->enum_type(0);
  Error_descriptor_ = file->message_type(5);
  static const int Error_offsets_[1] = {
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Error_Code_descriptor_ = Error_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_linear_5fsolver_2flinear_5fsolver2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MPVariableProto_descriptor_, &MPVariableProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MPConstraintProto_descriptor_, &MPConstraintProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MPConstraintProto_UnaryTerm_descriptor_, &MPConstraintProto_UnaryTerm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MPModelProto_descriptor_, &MPModelProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MPModelRequest_descriptor_, &MPModelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MPSolutionResponse_descriptor_, &MPSolutionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_linear_5fsolver_2flinear_5fsolver2_2eproto() {
  delete MPVariableProto::default_instance_;
  delete MPVariableProto_reflection_;
  delete MPConstraintProto::default_instance_;
  delete MPConstraintProto_reflection_;
  delete MPConstraintProto_UnaryTerm::default_instance_;
  delete MPConstraintProto_UnaryTerm_reflection_;
  delete MPModelProto::default_instance_;
  delete MPModelProto_reflection_;
  delete MPModelRequest::default_instance_;
  delete MPModelRequest_reflection_;
  delete MPSolutionResponse::default_instance_;
  delete MPSolutionResponse_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
}

void protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"linear_solver/linear_solver2.proto\022\035op"
    "erations_research.new_proto\"\264\001\n\017MPVariab"
    "leProto\022\031\n\013lower_bound\030\001 \001(\001:\004-inf\022\030\n\013up"
    "per_bound\030\002 \001(\001:\003inf\022 \n\025objective_coeffi"
    "cient\030\003 \001(\001:\0010\022\031\n\nis_integer\030\004 \001(\010:\005fals"
    "e\022\016\n\004name\030\005 \001(\t:\000\022\037\n\020can_also_be_zero\030\006 "
    "\001(\010:\005false\"\251\002\n\021MPConstraintProto\022\025\n\tvar_"
    "index\030\006 \003(\005B\002\020\001\022\027\n\013coefficient\030\007 \003(\001B\002\020\001"
    "\022O\n\013linear_term\030\001 \003(\0132:.operations_resea"
    "rch.new_proto.MPConstraintProto.UnaryTer"
    "m\022\031\n\013lower_bound\030\002 \001(\001:\004-inf\022\030\n\013upper_bo"
    "und\030\003 \001(\001:\003inf\022\016\n\004name\030\004 \001(\t:\000\022\026\n\007is_laz"
    "y\030\005 \001(\010:\005false\0326\n\tUnaryTerm\022\021\n\tvar_index"
    "\030\001 \001(\005\022\026\n\013coefficient\030\002 \001(\001:\0011\"\334\001\n\014MPMod"
    "elProto\022\027\n\010maximize\030\001 \001(\010:\005false\022\033\n\020obje"
    "ctive_offset\030\002 \001(\001:\0010\022@\n\010variable\030\003 \003(\0132"
    "..operations_research.new_proto.MPVariab"
    "leProto\022D\n\nconstraint\030\004 \003(\01320.operations"
    "_research.new_proto.MPConstraintProto\022\016\n"
    "\004name\030\005 \001(\t:\000\"\361\002\n\016MPModelRequest\022:\n\005mode"
    "l\030\001 \001(\0132+.operations_research.new_proto."
    "MPModelProto\022M\n\013solver_type\030\002 \001(\01628.oper"
    "ations_research.new_proto.MPModelRequest"
    ".SolverType\022!\n\031solver_time_limit_seconds"
    "\030\003 \001(\001\"\260\001\n\nSolverType\022\032\n\026CLP_LINEAR_PROG"
    "RAMMING\020\000\022\033\n\027GLPK_LINEAR_PROGRAMMING\020\001\022\""
    "\n\036SCIP_MIXED_INTEGER_PROGRAMMING\020\003\022\"\n\036GL"
    "PK_MIXED_INTEGER_PROGRAMMING\020\004\022!\n\035CBC_MI"
    "XED_INTEGER_PROGRAMMING\020\005\"\246\002\n\022MPSolution"
    "Response\022Q\n\006status\030\001 \001(\01628.operations_re"
    "search.new_proto.MPSolutionResponse.Stat"
    "us:\007UNKNOWN\022\027\n\017objective_value\030\002 \001(\001\022\032\n\016"
    "variable_value\030\003 \003(\001B\002\020\001\022\026\n\ndual_value\030\004"
    " \003(\001B\002\020\001\"p\n\006Status\022\013\n\007OPTIMAL\020\000\022\014\n\010FEASI"
    "BLE\020\001\022\016\n\nINFEASIBLE\020\002\022\r\n\tUNBOUNDED\020\003\022\014\n\010"
    "ABNORMAL\020\004\022\021\n\rMODEL_INVALID\020\005\022\013\n\007UNKNOWN"
    "\020c\"\234\001\n\005Error\"\222\001\n\004Code\022\014\n\010NO_ERROR\020\000\022\030\n\024I"
    "NVALID_PROBLEM_TYPE\020\001\022\031\n\025DUPLICATE_VARIA"
    "BLE_ID\020\002\022\027\n\023UNKNOWN_VARIABLE_ID\020\003\022\022\n\016REQ"
    "UEST_IS_QOD\020\004\022\032\n\026RPC_DEADLINE_TOO_SMALL\020"
    "\005B#\n\037com.google.ortools.linearsolverP\001", 1638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "linear_solver/linear_solver2.proto", &protobuf_RegisterTypes);
  MPVariableProto::default_instance_ = new MPVariableProto();
  MPConstraintProto::default_instance_ = new MPConstraintProto();
  MPConstraintProto_UnaryTerm::default_instance_ = new MPConstraintProto_UnaryTerm();
  MPModelProto::default_instance_ = new MPModelProto();
  MPModelRequest::default_instance_ = new MPModelRequest();
  MPSolutionResponse::default_instance_ = new MPSolutionResponse();
  Error::default_instance_ = new Error();
  MPVariableProto::default_instance_->InitAsDefaultInstance();
  MPConstraintProto::default_instance_->InitAsDefaultInstance();
  MPConstraintProto_UnaryTerm::default_instance_->InitAsDefaultInstance();
  MPModelProto::default_instance_->InitAsDefaultInstance();
  MPModelRequest::default_instance_->InitAsDefaultInstance();
  MPSolutionResponse::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_linear_5fsolver_2flinear_5fsolver2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_linear_5fsolver_2flinear_5fsolver2_2eproto {
  StaticDescriptorInitializer_linear_5fsolver_2flinear_5fsolver2_2eproto() {
    protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  }
} static_descriptor_initializer_linear_5fsolver_2flinear_5fsolver2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MPVariableProto::kLowerBoundFieldNumber;
const int MPVariableProto::kUpperBoundFieldNumber;
const int MPVariableProto::kObjectiveCoefficientFieldNumber;
const int MPVariableProto::kIsIntegerFieldNumber;
const int MPVariableProto::kNameFieldNumber;
const int MPVariableProto::kCanAlsoBeZeroFieldNumber;
#endif  // !_MSC_VER

MPVariableProto::MPVariableProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.new_proto.MPVariableProto)
}

void MPVariableProto::InitAsDefaultInstance() {
}

MPVariableProto::MPVariableProto(const MPVariableProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.new_proto.MPVariableProto)
}

void MPVariableProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lower_bound_ = -::google::protobuf::internal::Infinity();
  upper_bound_ = ::google::protobuf::internal::Infinity();
  objective_coefficient_ = 0;
  is_integer_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  can_also_be_zero_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MPVariableProto::~MPVariableProto() {
  // @@protoc_insertion_point(destructor:operations_research.new_proto.MPVariableProto)
  SharedDtor();
}

void MPVariableProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MPVariableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPVariableProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPVariableProto_descriptor_;
}

const MPVariableProto& MPVariableProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  return *default_instance_;
}

MPVariableProto* MPVariableProto::default_instance_ = NULL;

MPVariableProto* MPVariableProto::New() const {
  return new MPVariableProto;
}

void MPVariableProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MPVariableProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(is_integer_, can_also_be_zero_);
    lower_bound_ = -::google::protobuf::internal::Infinity();
    upper_bound_ = ::google::protobuf::internal::Infinity();
    objective_coefficient_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MPVariableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.new_proto.MPVariableProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lower_bound = 1 [default = -inf];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_bound_)));
          set_has_lower_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_upper_bound;
        break;
      }

      // optional double upper_bound = 2 [default = inf];
      case 2: {
        if (tag == 17) {
         parse_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_bound_)));
          set_has_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_objective_coefficient;
        break;
      }

      // optional double objective_coefficient = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_objective_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objective_coefficient_)));
          set_has_objective_coefficient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_integer;
        break;
      }

      // optional bool is_integer = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_is_integer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_integer_)));
          set_has_is_integer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_can_also_be_zero;
        break;
      }

      // optional bool can_also_be_zero = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_can_also_be_zero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_also_be_zero_)));
          set_has_can_also_be_zero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.new_proto.MPVariableProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.new_proto.MPVariableProto)
  return false;
#undef DO_
}

void MPVariableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.new_proto.MPVariableProto)
  // optional double lower_bound = 1 [default = -inf];
  if (has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lower_bound(), output);
  }

  // optional double upper_bound = 2 [default = inf];
  if (has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->upper_bound(), output);
  }

  // optional double objective_coefficient = 3 [default = 0];
  if (has_objective_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->objective_coefficient(), output);
  }

  // optional bool is_integer = 4 [default = false];
  if (has_is_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_integer(), output);
  }

  // optional string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bool can_also_be_zero = 6 [default = false];
  if (has_can_also_be_zero()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->can_also_be_zero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.new_proto.MPVariableProto)
}

::google::protobuf::uint8* MPVariableProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.new_proto.MPVariableProto)
  // optional double lower_bound = 1 [default = -inf];
  if (has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lower_bound(), target);
  }

  // optional double upper_bound = 2 [default = inf];
  if (has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->upper_bound(), target);
  }

  // optional double objective_coefficient = 3 [default = 0];
  if (has_objective_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->objective_coefficient(), target);
  }

  // optional bool is_integer = 4 [default = false];
  if (has_is_integer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_integer(), target);
  }

  // optional string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bool can_also_be_zero = 6 [default = false];
  if (has_can_also_be_zero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->can_also_be_zero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.new_proto.MPVariableProto)
  return target;
}

int MPVariableProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double lower_bound = 1 [default = -inf];
    if (has_lower_bound()) {
      total_size += 1 + 8;
    }

    // optional double upper_bound = 2 [default = inf];
    if (has_upper_bound()) {
      total_size += 1 + 8;
    }

    // optional double objective_coefficient = 3 [default = 0];
    if (has_objective_coefficient()) {
      total_size += 1 + 8;
    }

    // optional bool is_integer = 4 [default = false];
    if (has_is_integer()) {
      total_size += 1 + 1;
    }

    // optional string name = 5 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool can_also_be_zero = 6 [default = false];
    if (has_can_also_be_zero()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPVariableProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MPVariableProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MPVariableProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MPVariableProto::MergeFrom(const MPVariableProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lower_bound()) {
      set_lower_bound(from.lower_bound());
    }
    if (from.has_upper_bound()) {
      set_upper_bound(from.upper_bound());
    }
    if (from.has_objective_coefficient()) {
      set_objective_coefficient(from.objective_coefficient());
    }
    if (from.has_is_integer()) {
      set_is_integer(from.is_integer());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_can_also_be_zero()) {
      set_can_also_be_zero(from.can_also_be_zero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MPVariableProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPVariableProto::CopyFrom(const MPVariableProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPVariableProto::IsInitialized() const {

  return true;
}

void MPVariableProto::Swap(MPVariableProto* other) {
  if (other != this) {
    std::swap(lower_bound_, other->lower_bound_);
    std::swap(upper_bound_, other->upper_bound_);
    std::swap(objective_coefficient_, other->objective_coefficient_);
    std::swap(is_integer_, other->is_integer_);
    std::swap(name_, other->name_);
    std::swap(can_also_be_zero_, other->can_also_be_zero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MPVariableProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MPVariableProto_descriptor_;
  metadata.reflection = MPVariableProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MPConstraintProto_UnaryTerm::kVarIndexFieldNumber;
const int MPConstraintProto_UnaryTerm::kCoefficientFieldNumber;
#endif  // !_MSC_VER

MPConstraintProto_UnaryTerm::MPConstraintProto_UnaryTerm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.new_proto.MPConstraintProto.UnaryTerm)
}

void MPConstraintProto_UnaryTerm::InitAsDefaultInstance() {
}

MPConstraintProto_UnaryTerm::MPConstraintProto_UnaryTerm(const MPConstraintProto_UnaryTerm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.new_proto.MPConstraintProto.UnaryTerm)
}

void MPConstraintProto_UnaryTerm::SharedCtor() {
  _cached_size_ = 0;
  var_index_ = 0;
  coefficient_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MPConstraintProto_UnaryTerm::~MPConstraintProto_UnaryTerm() {
  // @@protoc_insertion_point(destructor:operations_research.new_proto.MPConstraintProto.UnaryTerm)
  SharedDtor();
}

void MPConstraintProto_UnaryTerm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MPConstraintProto_UnaryTerm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPConstraintProto_UnaryTerm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPConstraintProto_UnaryTerm_descriptor_;
}

const MPConstraintProto_UnaryTerm& MPConstraintProto_UnaryTerm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  return *default_instance_;
}

MPConstraintProto_UnaryTerm* MPConstraintProto_UnaryTerm::default_instance_ = NULL;

MPConstraintProto_UnaryTerm* MPConstraintProto_UnaryTerm::New() const {
  return new MPConstraintProto_UnaryTerm;
}

void MPConstraintProto_UnaryTerm::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    var_index_ = 0;
    coefficient_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MPConstraintProto_UnaryTerm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.new_proto.MPConstraintProto.UnaryTerm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 var_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &var_index_)));
          set_has_var_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_coefficient;
        break;
      }

      // optional double coefficient = 2 [default = 1];
      case 2: {
        if (tag == 17) {
         parse_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coefficient_)));
          set_has_coefficient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.new_proto.MPConstraintProto.UnaryTerm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.new_proto.MPConstraintProto.UnaryTerm)
  return false;
#undef DO_
}

void MPConstraintProto_UnaryTerm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.new_proto.MPConstraintProto.UnaryTerm)
  // optional int32 var_index = 1;
  if (has_var_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->var_index(), output);
  }

  // optional double coefficient = 2 [default = 1];
  if (has_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->coefficient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.new_proto.MPConstraintProto.UnaryTerm)
}

::google::protobuf::uint8* MPConstraintProto_UnaryTerm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.new_proto.MPConstraintProto.UnaryTerm)
  // optional int32 var_index = 1;
  if (has_var_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->var_index(), target);
  }

  // optional double coefficient = 2 [default = 1];
  if (has_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->coefficient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.new_proto.MPConstraintProto.UnaryTerm)
  return target;
}

int MPConstraintProto_UnaryTerm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 var_index = 1;
    if (has_var_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->var_index());
    }

    // optional double coefficient = 2 [default = 1];
    if (has_coefficient()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPConstraintProto_UnaryTerm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MPConstraintProto_UnaryTerm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MPConstraintProto_UnaryTerm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MPConstraintProto_UnaryTerm::MergeFrom(const MPConstraintProto_UnaryTerm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_index()) {
      set_var_index(from.var_index());
    }
    if (from.has_coefficient()) {
      set_coefficient(from.coefficient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MPConstraintProto_UnaryTerm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPConstraintProto_UnaryTerm::CopyFrom(const MPConstraintProto_UnaryTerm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPConstraintProto_UnaryTerm::IsInitialized() const {

  return true;
}

void MPConstraintProto_UnaryTerm::Swap(MPConstraintProto_UnaryTerm* other) {
  if (other != this) {
    std::swap(var_index_, other->var_index_);
    std::swap(coefficient_, other->coefficient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MPConstraintProto_UnaryTerm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MPConstraintProto_UnaryTerm_descriptor_;
  metadata.reflection = MPConstraintProto_UnaryTerm_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MPConstraintProto::kVarIndexFieldNumber;
const int MPConstraintProto::kCoefficientFieldNumber;
const int MPConstraintProto::kLinearTermFieldNumber;
const int MPConstraintProto::kLowerBoundFieldNumber;
const int MPConstraintProto::kUpperBoundFieldNumber;
const int MPConstraintProto::kNameFieldNumber;
const int MPConstraintProto::kIsLazyFieldNumber;
#endif  // !_MSC_VER

MPConstraintProto::MPConstraintProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.new_proto.MPConstraintProto)
}

void MPConstraintProto::InitAsDefaultInstance() {
}

MPConstraintProto::MPConstraintProto(const MPConstraintProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.new_proto.MPConstraintProto)
}

void MPConstraintProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lower_bound_ = -::google::protobuf::internal::Infinity();
  upper_bound_ = ::google::protobuf::internal::Infinity();
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_lazy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MPConstraintProto::~MPConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.new_proto.MPConstraintProto)
  SharedDtor();
}

void MPConstraintProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MPConstraintProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPConstraintProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPConstraintProto_descriptor_;
}

const MPConstraintProto& MPConstraintProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  return *default_instance_;
}

MPConstraintProto* MPConstraintProto::default_instance_ = NULL;

MPConstraintProto* MPConstraintProto::New() const {
  return new MPConstraintProto;
}

void MPConstraintProto::Clear() {
  if (_has_bits_[0 / 32] & 120) {
    lower_bound_ = -::google::protobuf::internal::Infinity();
    upper_bound_ = ::google::protobuf::internal::Infinity();
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    is_lazy_ = false;
  }
  var_index_.Clear();
  coefficient_.Clear();
  linear_term_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MPConstraintProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.new_proto.MPConstraintProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .operations_research.new_proto.MPConstraintProto.UnaryTerm linear_term = 1;
      case 1: {
        if (tag == 10) {
         parse_linear_term:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linear_term()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_linear_term;
        if (input->ExpectTag(17)) goto parse_lower_bound;
        break;
      }

      // optional double lower_bound = 2 [default = -inf];
      case 2: {
        if (tag == 17) {
         parse_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_bound_)));
          set_has_lower_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_upper_bound;
        break;
      }

      // optional double upper_bound = 3 [default = inf];
      case 3: {
        if (tag == 25) {
         parse_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_bound_)));
          set_has_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_lazy;
        break;
      }

      // optional bool is_lazy = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_is_lazy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lazy_)));
          set_has_is_lazy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_var_index;
        break;
      }

      // repeated int32 var_index = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_var_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_var_index())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_var_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_coefficient;
        break;
      }

      // repeated double coefficient = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_coefficient())));
        } else if (tag == 57) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58, input, this->mutable_coefficient())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.new_proto.MPConstraintProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.new_proto.MPConstraintProto)
  return false;
#undef DO_
}

void MPConstraintProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.new_proto.MPConstraintProto)
  // repeated .operations_research.new_proto.MPConstraintProto.UnaryTerm linear_term = 1;
  for (int i = 0; i < this->linear_term_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linear_term(i), output);
  }

  // optional double lower_bound = 2 [default = -inf];
  if (has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lower_bound(), output);
  }

  // optional double upper_bound = 3 [default = inf];
  if (has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->upper_bound(), output);
  }

  // optional string name = 4 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional bool is_lazy = 5 [default = false];
  if (has_is_lazy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_lazy(), output);
  }

  // repeated int32 var_index = 6 [packed = true];
  if (this->var_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_var_index_cached_byte_size_);
  }
  for (int i = 0; i < this->var_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->var_index(i), output);
  }

  // repeated double coefficient = 7 [packed = true];
  if (this->coefficient_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_coefficient_cached_byte_size_);
  }
  for (int i = 0; i < this->coefficient_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->coefficient(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.new_proto.MPConstraintProto)
}

::google::protobuf::uint8* MPConstraintProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.new_proto.MPConstraintProto)
  // repeated .operations_research.new_proto.MPConstraintProto.UnaryTerm linear_term = 1;
  for (int i = 0; i < this->linear_term_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linear_term(i), target);
  }

  // optional double lower_bound = 2 [default = -inf];
  if (has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lower_bound(), target);
  }

  // optional double upper_bound = 3 [default = inf];
  if (has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->upper_bound(), target);
  }

  // optional string name = 4 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional bool is_lazy = 5 [default = false];
  if (has_is_lazy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_lazy(), target);
  }

  // repeated int32 var_index = 6 [packed = true];
  if (this->var_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _var_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->var_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->var_index(i), target);
  }

  // repeated double coefficient = 7 [packed = true];
  if (this->coefficient_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _coefficient_cached_byte_size_, target);
  }
  for (int i = 0; i < this->coefficient_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->coefficient(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.new_proto.MPConstraintProto)
  return target;
}

int MPConstraintProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional double lower_bound = 2 [default = -inf];
    if (has_lower_bound()) {
      total_size += 1 + 8;
    }

    // optional double upper_bound = 3 [default = inf];
    if (has_upper_bound()) {
      total_size += 1 + 8;
    }

    // optional string name = 4 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool is_lazy = 5 [default = false];
    if (has_is_lazy()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 var_index = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->var_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->var_index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _var_index_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double coefficient = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->coefficient_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _coefficient_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .operations_research.new_proto.MPConstraintProto.UnaryTerm linear_term = 1;
  total_size += 1 * this->linear_term_size();
  for (int i = 0; i < this->linear_term_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linear_term(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPConstraintProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MPConstraintProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MPConstraintProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MPConstraintProto::MergeFrom(const MPConstraintProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  var_index_.MergeFrom(from.var_index_);
  coefficient_.MergeFrom(from.coefficient_);
  linear_term_.MergeFrom(from.linear_term_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_lower_bound()) {
      set_lower_bound(from.lower_bound());
    }
    if (from.has_upper_bound()) {
      set_upper_bound(from.upper_bound());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_lazy()) {
      set_is_lazy(from.is_lazy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MPConstraintProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPConstraintProto::CopyFrom(const MPConstraintProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPConstraintProto::IsInitialized() const {

  return true;
}

void MPConstraintProto::Swap(MPConstraintProto* other) {
  if (other != this) {
    var_index_.Swap(&other->var_index_);
    coefficient_.Swap(&other->coefficient_);
    linear_term_.Swap(&other->linear_term_);
    std::swap(lower_bound_, other->lower_bound_);
    std::swap(upper_bound_, other->upper_bound_);
    std::swap(name_, other->name_);
    std::swap(is_lazy_, other->is_lazy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MPConstraintProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MPConstraintProto_descriptor_;
  metadata.reflection = MPConstraintProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MPModelProto::kMaximizeFieldNumber;
const int MPModelProto::kObjectiveOffsetFieldNumber;
const int MPModelProto::kVariableFieldNumber;
const int MPModelProto::kConstraintFieldNumber;
const int MPModelProto::kNameFieldNumber;
#endif  // !_MSC_VER

MPModelProto::MPModelProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.new_proto.MPModelProto)
}

void MPModelProto::InitAsDefaultInstance() {
}

MPModelProto::MPModelProto(const MPModelProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.new_proto.MPModelProto)
}

void MPModelProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  maximize_ = false;
  objective_offset_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MPModelProto::~MPModelProto() {
  // @@protoc_insertion_point(destructor:operations_research.new_proto.MPModelProto)
  SharedDtor();
}

void MPModelProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MPModelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPModelProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPModelProto_descriptor_;
}

const MPModelProto& MPModelProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  return *default_instance_;
}

MPModelProto* MPModelProto::default_instance_ = NULL;

MPModelProto* MPModelProto::New() const {
  return new MPModelProto;
}

void MPModelProto::Clear() {
  if (_has_bits_[0 / 32] & 19) {
    maximize_ = false;
    objective_offset_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  variable_.Clear();
  constraint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MPModelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.new_proto.MPModelProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool maximize = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maximize_)));
          set_has_maximize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_objective_offset;
        break;
      }

      // optional double objective_offset = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_objective_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objective_offset_)));
          set_has_objective_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_variable;
        break;
      }

      // repeated .operations_research.new_proto.MPVariableProto variable = 3;
      case 3: {
        if (tag == 26) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_variable;
        if (input->ExpectTag(34)) goto parse_constraint;
        break;
      }

      // repeated .operations_research.new_proto.MPConstraintProto constraint = 4;
      case 4: {
        if (tag == 34) {
         parse_constraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_constraint;
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.new_proto.MPModelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.new_proto.MPModelProto)
  return false;
#undef DO_
}

void MPModelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.new_proto.MPModelProto)
  // optional bool maximize = 1 [default = false];
  if (has_maximize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->maximize(), output);
  }

  // optional double objective_offset = 2 [default = 0];
  if (has_objective_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->objective_offset(), output);
  }

  // repeated .operations_research.new_proto.MPVariableProto variable = 3;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->variable(i), output);
  }

  // repeated .operations_research.new_proto.MPConstraintProto constraint = 4;
  for (int i = 0; i < this->constraint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->constraint(i), output);
  }

  // optional string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.new_proto.MPModelProto)
}

::google::protobuf::uint8* MPModelProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.new_proto.MPModelProto)
  // optional bool maximize = 1 [default = false];
  if (has_maximize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->maximize(), target);
  }

  // optional double objective_offset = 2 [default = 0];
  if (has_objective_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->objective_offset(), target);
  }

  // repeated .operations_research.new_proto.MPVariableProto variable = 3;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->variable(i), target);
  }

  // repeated .operations_research.new_proto.MPConstraintProto constraint = 4;
  for (int i = 0; i < this->constraint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->constraint(i), target);
  }

  // optional string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.new_proto.MPModelProto)
  return target;
}

int MPModelProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool maximize = 1 [default = false];
    if (has_maximize()) {
      total_size += 1 + 1;
    }

    // optional double objective_offset = 2 [default = 0];
    if (has_objective_offset()) {
      total_size += 1 + 8;
    }

    // optional string name = 5 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .operations_research.new_proto.MPVariableProto variable = 3;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }

  // repeated .operations_research.new_proto.MPConstraintProto constraint = 4;
  total_size += 1 * this->constraint_size();
  for (int i = 0; i < this->constraint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPModelProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MPModelProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MPModelProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MPModelProto::MergeFrom(const MPModelProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  constraint_.MergeFrom(from.constraint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maximize()) {
      set_maximize(from.maximize());
    }
    if (from.has_objective_offset()) {
      set_objective_offset(from.objective_offset());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MPModelProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPModelProto::CopyFrom(const MPModelProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPModelProto::IsInitialized() const {

  return true;
}

void MPModelProto::Swap(MPModelProto* other) {
  if (other != this) {
    std::swap(maximize_, other->maximize_);
    std::swap(objective_offset_, other->objective_offset_);
    variable_.Swap(&other->variable_);
    constraint_.Swap(&other->constraint_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MPModelProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MPModelProto_descriptor_;
  metadata.reflection = MPModelProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MPModelRequest_SolverType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPModelRequest_SolverType_descriptor_;
}
bool MPModelRequest_SolverType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MPModelRequest_SolverType MPModelRequest::CLP_LINEAR_PROGRAMMING;
const MPModelRequest_SolverType MPModelRequest::GLPK_LINEAR_PROGRAMMING;
const MPModelRequest_SolverType MPModelRequest::SCIP_MIXED_INTEGER_PROGRAMMING;
const MPModelRequest_SolverType MPModelRequest::GLPK_MIXED_INTEGER_PROGRAMMING;
const MPModelRequest_SolverType MPModelRequest::CBC_MIXED_INTEGER_PROGRAMMING;
const MPModelRequest_SolverType MPModelRequest::SolverType_MIN;
const MPModelRequest_SolverType MPModelRequest::SolverType_MAX;
const int MPModelRequest::SolverType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MPModelRequest::kModelFieldNumber;
const int MPModelRequest::kSolverTypeFieldNumber;
const int MPModelRequest::kSolverTimeLimitSecondsFieldNumber;
#endif  // !_MSC_VER

MPModelRequest::MPModelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.new_proto.MPModelRequest)
}

void MPModelRequest::InitAsDefaultInstance() {
  model_ = const_cast< ::operations_research::new_proto::MPModelProto*>(&::operations_research::new_proto::MPModelProto::default_instance());
}

MPModelRequest::MPModelRequest(const MPModelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.new_proto.MPModelRequest)
}

void MPModelRequest::SharedCtor() {
  _cached_size_ = 0;
  model_ = NULL;
  solver_type_ = 0;
  solver_time_limit_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MPModelRequest::~MPModelRequest() {
  // @@protoc_insertion_point(destructor:operations_research.new_proto.MPModelRequest)
  SharedDtor();
}

void MPModelRequest::SharedDtor() {
  if (this != default_instance_) {
    delete model_;
  }
}

void MPModelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPModelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPModelRequest_descriptor_;
}

const MPModelRequest& MPModelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  return *default_instance_;
}

MPModelRequest* MPModelRequest::default_instance_ = NULL;

MPModelRequest* MPModelRequest::New() const {
  return new MPModelRequest;
}

void MPModelRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MPModelRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(solver_time_limit_seconds_, solver_type_);
    if (has_model()) {
      if (model_ != NULL) model_->::operations_research::new_proto::MPModelProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MPModelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.new_proto.MPModelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .operations_research.new_proto.MPModelProto model = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_solver_type;
        break;
      }

      // optional .operations_research.new_proto.MPModelRequest.SolverType solver_type = 2;
      case 2: {
        if (tag == 16) {
         parse_solver_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::new_proto::MPModelRequest_SolverType_IsValid(value)) {
            set_solver_type(static_cast< ::operations_research::new_proto::MPModelRequest_SolverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_solver_time_limit_seconds;
        break;
      }

      // optional double solver_time_limit_seconds = 3;
      case 3: {
        if (tag == 25) {
         parse_solver_time_limit_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &solver_time_limit_seconds_)));
          set_has_solver_time_limit_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.new_proto.MPModelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.new_proto.MPModelRequest)
  return false;
#undef DO_
}

void MPModelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.new_proto.MPModelRequest)
  // optional .operations_research.new_proto.MPModelProto model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->model(), output);
  }

  // optional .operations_research.new_proto.MPModelRequest.SolverType solver_type = 2;
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->solver_type(), output);
  }

  // optional double solver_time_limit_seconds = 3;
  if (has_solver_time_limit_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->solver_time_limit_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.new_proto.MPModelRequest)
}

::google::protobuf::uint8* MPModelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.new_proto.MPModelRequest)
  // optional .operations_research.new_proto.MPModelProto model = 1;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->model(), target);
  }

  // optional .operations_research.new_proto.MPModelRequest.SolverType solver_type = 2;
  if (has_solver_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->solver_type(), target);
  }

  // optional double solver_time_limit_seconds = 3;
  if (has_solver_time_limit_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->solver_time_limit_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.new_proto.MPModelRequest)
  return target;
}

int MPModelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .operations_research.new_proto.MPModelProto model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model());
    }

    // optional .operations_research.new_proto.MPModelRequest.SolverType solver_type = 2;
    if (has_solver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_type());
    }

    // optional double solver_time_limit_seconds = 3;
    if (has_solver_time_limit_seconds()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPModelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MPModelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MPModelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MPModelRequest::MergeFrom(const MPModelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      mutable_model()->::operations_research::new_proto::MPModelProto::MergeFrom(from.model());
    }
    if (from.has_solver_type()) {
      set_solver_type(from.solver_type());
    }
    if (from.has_solver_time_limit_seconds()) {
      set_solver_time_limit_seconds(from.solver_time_limit_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MPModelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPModelRequest::CopyFrom(const MPModelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPModelRequest::IsInitialized() const {

  return true;
}

void MPModelRequest::Swap(MPModelRequest* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(solver_type_, other->solver_type_);
    std::swap(solver_time_limit_seconds_, other->solver_time_limit_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MPModelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MPModelRequest_descriptor_;
  metadata.reflection = MPModelRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MPSolutionResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPSolutionResponse_Status_descriptor_;
}
bool MPSolutionResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MPSolutionResponse_Status MPSolutionResponse::OPTIMAL;
const MPSolutionResponse_Status MPSolutionResponse::FEASIBLE;
const MPSolutionResponse_Status MPSolutionResponse::INFEASIBLE;
const MPSolutionResponse_Status MPSolutionResponse::UNBOUNDED;
const MPSolutionResponse_Status MPSolutionResponse::ABNORMAL;
const MPSolutionResponse_Status MPSolutionResponse::MODEL_INVALID;
const MPSolutionResponse_Status MPSolutionResponse::UNKNOWN;
const MPSolutionResponse_Status MPSolutionResponse::Status_MIN;
const MPSolutionResponse_Status MPSolutionResponse::Status_MAX;
const int MPSolutionResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MPSolutionResponse::kStatusFieldNumber;
const int MPSolutionResponse::kObjectiveValueFieldNumber;
const int MPSolutionResponse::kVariableValueFieldNumber;
const int MPSolutionResponse::kDualValueFieldNumber;
#endif  // !_MSC_VER

MPSolutionResponse::MPSolutionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.new_proto.MPSolutionResponse)
}

void MPSolutionResponse::InitAsDefaultInstance() {
}

MPSolutionResponse::MPSolutionResponse(const MPSolutionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.new_proto.MPSolutionResponse)
}

void MPSolutionResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 99;
  objective_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MPSolutionResponse::~MPSolutionResponse() {
  // @@protoc_insertion_point(destructor:operations_research.new_proto.MPSolutionResponse)
  SharedDtor();
}

void MPSolutionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MPSolutionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPSolutionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPSolutionResponse_descriptor_;
}

const MPSolutionResponse& MPSolutionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  return *default_instance_;
}

MPSolutionResponse* MPSolutionResponse::default_instance_ = NULL;

MPSolutionResponse* MPSolutionResponse::New() const {
  return new MPSolutionResponse;
}

void MPSolutionResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 99;
    objective_value_ = 0;
  }
  variable_value_.Clear();
  dual_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MPSolutionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.new_proto.MPSolutionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .operations_research.new_proto.MPSolutionResponse.Status status = 1 [default = UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::new_proto::MPSolutionResponse_Status_IsValid(value)) {
            set_status(static_cast< ::operations_research::new_proto::MPSolutionResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_objective_value;
        break;
      }

      // optional double objective_value = 2;
      case 2: {
        if (tag == 17) {
         parse_objective_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objective_value_)));
          set_has_objective_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_variable_value;
        break;
      }

      // repeated double variable_value = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_variable_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_variable_value())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_variable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dual_value;
        break;
      }

      // repeated double dual_value = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_dual_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dual_value())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_dual_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.new_proto.MPSolutionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.new_proto.MPSolutionResponse)
  return false;
#undef DO_
}

void MPSolutionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.new_proto.MPSolutionResponse)
  // optional .operations_research.new_proto.MPSolutionResponse.Status status = 1 [default = UNKNOWN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional double objective_value = 2;
  if (has_objective_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->objective_value(), output);
  }

  // repeated double variable_value = 3 [packed = true];
  if (this->variable_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_variable_value_cached_byte_size_);
  }
  for (int i = 0; i < this->variable_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->variable_value(i), output);
  }

  // repeated double dual_value = 4 [packed = true];
  if (this->dual_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dual_value_cached_byte_size_);
  }
  for (int i = 0; i < this->dual_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->dual_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.new_proto.MPSolutionResponse)
}

::google::protobuf::uint8* MPSolutionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.new_proto.MPSolutionResponse)
  // optional .operations_research.new_proto.MPSolutionResponse.Status status = 1 [default = UNKNOWN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional double objective_value = 2;
  if (has_objective_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->objective_value(), target);
  }

  // repeated double variable_value = 3 [packed = true];
  if (this->variable_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _variable_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->variable_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->variable_value(i), target);
  }

  // repeated double dual_value = 4 [packed = true];
  if (this->dual_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dual_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dual_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->dual_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.new_proto.MPSolutionResponse)
  return target;
}

int MPSolutionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .operations_research.new_proto.MPSolutionResponse.Status status = 1 [default = UNKNOWN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional double objective_value = 2;
    if (has_objective_value()) {
      total_size += 1 + 8;
    }

  }
  // repeated double variable_value = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->variable_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _variable_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double dual_value = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->dual_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dual_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPSolutionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MPSolutionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MPSolutionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MPSolutionResponse::MergeFrom(const MPSolutionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_value_.MergeFrom(from.variable_value_);
  dual_value_.MergeFrom(from.dual_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_objective_value()) {
      set_objective_value(from.objective_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MPSolutionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPSolutionResponse::CopyFrom(const MPSolutionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPSolutionResponse::IsInitialized() const {

  return true;
}

void MPSolutionResponse::Swap(MPSolutionResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(objective_value_, other->objective_value_);
    variable_value_.Swap(&other->variable_value_);
    dual_value_.Swap(&other->dual_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MPSolutionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MPSolutionResponse_descriptor_;
  metadata.reflection = MPSolutionResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_Code_descriptor_;
}
bool Error_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Error_Code Error::NO_ERROR;
const Error_Code Error::INVALID_PROBLEM_TYPE;
const Error_Code Error::DUPLICATE_VARIABLE_ID;
const Error_Code Error::UNKNOWN_VARIABLE_ID;
const Error_Code Error::REQUEST_IS_QOD;
const Error_Code Error::RPC_DEADLINE_TOO_SMALL;
const Error_Code Error::Code_MIN;
const Error_Code Error::Code_MAX;
const int Error::Code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.new_proto.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.new_proto.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:operations_research.new_proto.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fsolver_2flinear_5fsolver2_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.new_proto.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.new_proto.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.new_proto.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.new_proto.Error)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.new_proto.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.new_proto.Error)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.new_proto.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace new_proto
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
