// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sat/sat_parameters.proto

#ifndef PROTOBUF_sat_2fsat_5fparameters_2eproto__INCLUDED
#define PROTOBUF_sat_2fsat_5fparameters_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace operations_research {
namespace sat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sat_2fsat_5fparameters_2eproto();
void protobuf_AssignDesc_sat_2fsat_5fparameters_2eproto();
void protobuf_ShutdownFile_sat_2fsat_5fparameters_2eproto();

class SatParameters;

enum SatParameters_VariableOrder {
  SatParameters_VariableOrder_IN_ORDER = 0,
  SatParameters_VariableOrder_IN_REVERSE_ORDER = 1,
  SatParameters_VariableOrder_IN_RANDOM_ORDER = 2
};
bool SatParameters_VariableOrder_IsValid(int value);
const SatParameters_VariableOrder SatParameters_VariableOrder_VariableOrder_MIN = SatParameters_VariableOrder_IN_ORDER;
const SatParameters_VariableOrder SatParameters_VariableOrder_VariableOrder_MAX = SatParameters_VariableOrder_IN_RANDOM_ORDER;
const int SatParameters_VariableOrder_VariableOrder_ARRAYSIZE = SatParameters_VariableOrder_VariableOrder_MAX + 1;

const ::google::protobuf::EnumDescriptor* SatParameters_VariableOrder_descriptor();
inline const ::std::string& SatParameters_VariableOrder_Name(SatParameters_VariableOrder value) {
  return ::google::protobuf::internal::NameOfEnum(
    SatParameters_VariableOrder_descriptor(), value);
}
inline bool SatParameters_VariableOrder_Parse(
    const ::std::string& name, SatParameters_VariableOrder* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SatParameters_VariableOrder>(
    SatParameters_VariableOrder_descriptor(), name, value);
}
enum SatParameters_Polarity {
  SatParameters_Polarity_POLARITY_TRUE = 0,
  SatParameters_Polarity_POLARITY_FALSE = 1,
  SatParameters_Polarity_POLARITY_RANDOM = 2,
  SatParameters_Polarity_POLARITY_WEIGHTED_SIGN = 3,
  SatParameters_Polarity_POLARITY_REVERSE_WEIGHTED_SIGN = 4
};
bool SatParameters_Polarity_IsValid(int value);
const SatParameters_Polarity SatParameters_Polarity_Polarity_MIN = SatParameters_Polarity_POLARITY_TRUE;
const SatParameters_Polarity SatParameters_Polarity_Polarity_MAX = SatParameters_Polarity_POLARITY_REVERSE_WEIGHTED_SIGN;
const int SatParameters_Polarity_Polarity_ARRAYSIZE = SatParameters_Polarity_Polarity_MAX + 1;

const ::google::protobuf::EnumDescriptor* SatParameters_Polarity_descriptor();
inline const ::std::string& SatParameters_Polarity_Name(SatParameters_Polarity value) {
  return ::google::protobuf::internal::NameOfEnum(
    SatParameters_Polarity_descriptor(), value);
}
inline bool SatParameters_Polarity_Parse(
    const ::std::string& name, SatParameters_Polarity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SatParameters_Polarity>(
    SatParameters_Polarity_descriptor(), name, value);
}
enum SatParameters_LiteralOrdering {
  SatParameters_LiteralOrdering_LITERAL_IN_ORDER = 0,
  SatParameters_LiteralOrdering_VAR_MIN_USAGE = 1,
  SatParameters_LiteralOrdering_VAR_MAX_USAGE = 2
};
bool SatParameters_LiteralOrdering_IsValid(int value);
const SatParameters_LiteralOrdering SatParameters_LiteralOrdering_LiteralOrdering_MIN = SatParameters_LiteralOrdering_LITERAL_IN_ORDER;
const SatParameters_LiteralOrdering SatParameters_LiteralOrdering_LiteralOrdering_MAX = SatParameters_LiteralOrdering_VAR_MAX_USAGE;
const int SatParameters_LiteralOrdering_LiteralOrdering_ARRAYSIZE = SatParameters_LiteralOrdering_LiteralOrdering_MAX + 1;

const ::google::protobuf::EnumDescriptor* SatParameters_LiteralOrdering_descriptor();
inline const ::std::string& SatParameters_LiteralOrdering_Name(SatParameters_LiteralOrdering value) {
  return ::google::protobuf::internal::NameOfEnum(
    SatParameters_LiteralOrdering_descriptor(), value);
}
inline bool SatParameters_LiteralOrdering_Parse(
    const ::std::string& name, SatParameters_LiteralOrdering* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SatParameters_LiteralOrdering>(
    SatParameters_LiteralOrdering_descriptor(), name, value);
}
enum SatParameters_ConflictMinimizationAlgorithm {
  SatParameters_ConflictMinimizationAlgorithm_NONE = 0,
  SatParameters_ConflictMinimizationAlgorithm_SIMPLE = 1,
  SatParameters_ConflictMinimizationAlgorithm_RECURSIVE = 2,
  SatParameters_ConflictMinimizationAlgorithm_EXPERIMENTAL = 3
};
bool SatParameters_ConflictMinimizationAlgorithm_IsValid(int value);
const SatParameters_ConflictMinimizationAlgorithm SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MIN = SatParameters_ConflictMinimizationAlgorithm_NONE;
const SatParameters_ConflictMinimizationAlgorithm SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MAX = SatParameters_ConflictMinimizationAlgorithm_EXPERIMENTAL;
const int SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_ARRAYSIZE = SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* SatParameters_ConflictMinimizationAlgorithm_descriptor();
inline const ::std::string& SatParameters_ConflictMinimizationAlgorithm_Name(SatParameters_ConflictMinimizationAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    SatParameters_ConflictMinimizationAlgorithm_descriptor(), value);
}
inline bool SatParameters_ConflictMinimizationAlgorithm_Parse(
    const ::std::string& name, SatParameters_ConflictMinimizationAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SatParameters_ConflictMinimizationAlgorithm>(
    SatParameters_ConflictMinimizationAlgorithm_descriptor(), name, value);
}
enum SatParameters_BinaryMinizationAlgorithm {
  SatParameters_BinaryMinizationAlgorithm_NO_BINARY_MINIMIZATION = 0,
  SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_FIRST = 1,
  SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_WITH_REACHABILITY = 2,
  SatParameters_BinaryMinizationAlgorithm_EXPERIMENTAL_BINARY_MINIMIZATION = 3
};
bool SatParameters_BinaryMinizationAlgorithm_IsValid(int value);
const SatParameters_BinaryMinizationAlgorithm SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MIN = SatParameters_BinaryMinizationAlgorithm_NO_BINARY_MINIMIZATION;
const SatParameters_BinaryMinizationAlgorithm SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MAX = SatParameters_BinaryMinizationAlgorithm_EXPERIMENTAL_BINARY_MINIMIZATION;
const int SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_ARRAYSIZE = SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* SatParameters_BinaryMinizationAlgorithm_descriptor();
inline const ::std::string& SatParameters_BinaryMinizationAlgorithm_Name(SatParameters_BinaryMinizationAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    SatParameters_BinaryMinizationAlgorithm_descriptor(), value);
}
inline bool SatParameters_BinaryMinizationAlgorithm_Parse(
    const ::std::string& name, SatParameters_BinaryMinizationAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SatParameters_BinaryMinizationAlgorithm>(
    SatParameters_BinaryMinizationAlgorithm_descriptor(), name, value);
}
// ===================================================================

class SatParameters : public ::google::protobuf::Message {
 public:
  SatParameters();
  virtual ~SatParameters();

  SatParameters(const SatParameters& from);

  inline SatParameters& operator=(const SatParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SatParameters& default_instance();

  void Swap(SatParameters* other);

  // implements Message ----------------------------------------------

  SatParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SatParameters& from);
  void MergeFrom(const SatParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SatParameters_VariableOrder VariableOrder;
  static const VariableOrder IN_ORDER = SatParameters_VariableOrder_IN_ORDER;
  static const VariableOrder IN_REVERSE_ORDER = SatParameters_VariableOrder_IN_REVERSE_ORDER;
  static const VariableOrder IN_RANDOM_ORDER = SatParameters_VariableOrder_IN_RANDOM_ORDER;
  static inline bool VariableOrder_IsValid(int value) {
    return SatParameters_VariableOrder_IsValid(value);
  }
  static const VariableOrder VariableOrder_MIN =
    SatParameters_VariableOrder_VariableOrder_MIN;
  static const VariableOrder VariableOrder_MAX =
    SatParameters_VariableOrder_VariableOrder_MAX;
  static const int VariableOrder_ARRAYSIZE =
    SatParameters_VariableOrder_VariableOrder_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VariableOrder_descriptor() {
    return SatParameters_VariableOrder_descriptor();
  }
  static inline const ::std::string& VariableOrder_Name(VariableOrder value) {
    return SatParameters_VariableOrder_Name(value);
  }
  static inline bool VariableOrder_Parse(const ::std::string& name,
      VariableOrder* value) {
    return SatParameters_VariableOrder_Parse(name, value);
  }

  typedef SatParameters_Polarity Polarity;
  static const Polarity POLARITY_TRUE = SatParameters_Polarity_POLARITY_TRUE;
  static const Polarity POLARITY_FALSE = SatParameters_Polarity_POLARITY_FALSE;
  static const Polarity POLARITY_RANDOM = SatParameters_Polarity_POLARITY_RANDOM;
  static const Polarity POLARITY_WEIGHTED_SIGN = SatParameters_Polarity_POLARITY_WEIGHTED_SIGN;
  static const Polarity POLARITY_REVERSE_WEIGHTED_SIGN = SatParameters_Polarity_POLARITY_REVERSE_WEIGHTED_SIGN;
  static inline bool Polarity_IsValid(int value) {
    return SatParameters_Polarity_IsValid(value);
  }
  static const Polarity Polarity_MIN =
    SatParameters_Polarity_Polarity_MIN;
  static const Polarity Polarity_MAX =
    SatParameters_Polarity_Polarity_MAX;
  static const int Polarity_ARRAYSIZE =
    SatParameters_Polarity_Polarity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Polarity_descriptor() {
    return SatParameters_Polarity_descriptor();
  }
  static inline const ::std::string& Polarity_Name(Polarity value) {
    return SatParameters_Polarity_Name(value);
  }
  static inline bool Polarity_Parse(const ::std::string& name,
      Polarity* value) {
    return SatParameters_Polarity_Parse(name, value);
  }

  typedef SatParameters_LiteralOrdering LiteralOrdering;
  static const LiteralOrdering LITERAL_IN_ORDER = SatParameters_LiteralOrdering_LITERAL_IN_ORDER;
  static const LiteralOrdering VAR_MIN_USAGE = SatParameters_LiteralOrdering_VAR_MIN_USAGE;
  static const LiteralOrdering VAR_MAX_USAGE = SatParameters_LiteralOrdering_VAR_MAX_USAGE;
  static inline bool LiteralOrdering_IsValid(int value) {
    return SatParameters_LiteralOrdering_IsValid(value);
  }
  static const LiteralOrdering LiteralOrdering_MIN =
    SatParameters_LiteralOrdering_LiteralOrdering_MIN;
  static const LiteralOrdering LiteralOrdering_MAX =
    SatParameters_LiteralOrdering_LiteralOrdering_MAX;
  static const int LiteralOrdering_ARRAYSIZE =
    SatParameters_LiteralOrdering_LiteralOrdering_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LiteralOrdering_descriptor() {
    return SatParameters_LiteralOrdering_descriptor();
  }
  static inline const ::std::string& LiteralOrdering_Name(LiteralOrdering value) {
    return SatParameters_LiteralOrdering_Name(value);
  }
  static inline bool LiteralOrdering_Parse(const ::std::string& name,
      LiteralOrdering* value) {
    return SatParameters_LiteralOrdering_Parse(name, value);
  }

  typedef SatParameters_ConflictMinimizationAlgorithm ConflictMinimizationAlgorithm;
  static const ConflictMinimizationAlgorithm NONE = SatParameters_ConflictMinimizationAlgorithm_NONE;
  static const ConflictMinimizationAlgorithm SIMPLE = SatParameters_ConflictMinimizationAlgorithm_SIMPLE;
  static const ConflictMinimizationAlgorithm RECURSIVE = SatParameters_ConflictMinimizationAlgorithm_RECURSIVE;
  static const ConflictMinimizationAlgorithm EXPERIMENTAL = SatParameters_ConflictMinimizationAlgorithm_EXPERIMENTAL;
  static inline bool ConflictMinimizationAlgorithm_IsValid(int value) {
    return SatParameters_ConflictMinimizationAlgorithm_IsValid(value);
  }
  static const ConflictMinimizationAlgorithm ConflictMinimizationAlgorithm_MIN =
    SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MIN;
  static const ConflictMinimizationAlgorithm ConflictMinimizationAlgorithm_MAX =
    SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MAX;
  static const int ConflictMinimizationAlgorithm_ARRAYSIZE =
    SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConflictMinimizationAlgorithm_descriptor() {
    return SatParameters_ConflictMinimizationAlgorithm_descriptor();
  }
  static inline const ::std::string& ConflictMinimizationAlgorithm_Name(ConflictMinimizationAlgorithm value) {
    return SatParameters_ConflictMinimizationAlgorithm_Name(value);
  }
  static inline bool ConflictMinimizationAlgorithm_Parse(const ::std::string& name,
      ConflictMinimizationAlgorithm* value) {
    return SatParameters_ConflictMinimizationAlgorithm_Parse(name, value);
  }

  typedef SatParameters_BinaryMinizationAlgorithm BinaryMinizationAlgorithm;
  static const BinaryMinizationAlgorithm NO_BINARY_MINIMIZATION = SatParameters_BinaryMinizationAlgorithm_NO_BINARY_MINIMIZATION;
  static const BinaryMinizationAlgorithm BINARY_MINIMIZATION_FIRST = SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_FIRST;
  static const BinaryMinizationAlgorithm BINARY_MINIMIZATION_WITH_REACHABILITY = SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_WITH_REACHABILITY;
  static const BinaryMinizationAlgorithm EXPERIMENTAL_BINARY_MINIMIZATION = SatParameters_BinaryMinizationAlgorithm_EXPERIMENTAL_BINARY_MINIMIZATION;
  static inline bool BinaryMinizationAlgorithm_IsValid(int value) {
    return SatParameters_BinaryMinizationAlgorithm_IsValid(value);
  }
  static const BinaryMinizationAlgorithm BinaryMinizationAlgorithm_MIN =
    SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MIN;
  static const BinaryMinizationAlgorithm BinaryMinizationAlgorithm_MAX =
    SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MAX;
  static const int BinaryMinizationAlgorithm_ARRAYSIZE =
    SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BinaryMinizationAlgorithm_descriptor() {
    return SatParameters_BinaryMinizationAlgorithm_descriptor();
  }
  static inline const ::std::string& BinaryMinizationAlgorithm_Name(BinaryMinizationAlgorithm value) {
    return SatParameters_BinaryMinizationAlgorithm_Name(value);
  }
  static inline bool BinaryMinizationAlgorithm_Parse(const ::std::string& name,
      BinaryMinizationAlgorithm* value) {
    return SatParameters_BinaryMinizationAlgorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
  inline bool has_preferred_variable_order() const;
  inline void clear_preferred_variable_order();
  static const int kPreferredVariableOrderFieldNumber = 1;
  inline ::operations_research::sat::SatParameters_VariableOrder preferred_variable_order() const;
  inline void set_preferred_variable_order(::operations_research::sat::SatParameters_VariableOrder value);

  // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
  inline bool has_initial_polarity() const;
  inline void clear_initial_polarity();
  static const int kInitialPolarityFieldNumber = 2;
  inline ::operations_research::sat::SatParameters_Polarity initial_polarity() const;
  inline void set_initial_polarity(::operations_research::sat::SatParameters_Polarity value);

  // optional bool use_phase_saving = 44 [default = true];
  inline bool has_use_phase_saving() const;
  inline void clear_use_phase_saving();
  static const int kUsePhaseSavingFieldNumber = 44;
  inline bool use_phase_saving() const;
  inline void set_use_phase_saving(bool value);

  // optional double random_polarity_ratio = 45 [default = 0];
  inline bool has_random_polarity_ratio() const;
  inline void clear_random_polarity_ratio();
  static const int kRandomPolarityRatioFieldNumber = 45;
  inline double random_polarity_ratio() const;
  inline void set_random_polarity_ratio(double value);

  // optional .operations_research.sat.SatParameters.LiteralOrdering literal_ordering = 3 [default = LITERAL_IN_ORDER];
  inline bool has_literal_ordering() const;
  inline void clear_literal_ordering();
  static const int kLiteralOrderingFieldNumber = 3;
  inline ::operations_research::sat::SatParameters_LiteralOrdering literal_ordering() const;
  inline void set_literal_ordering(::operations_research::sat::SatParameters_LiteralOrdering value);

  // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
  inline bool has_minimization_algorithm() const;
  inline void clear_minimization_algorithm();
  static const int kMinimizationAlgorithmFieldNumber = 4;
  inline ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm minimization_algorithm() const;
  inline void set_minimization_algorithm(::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm value);

  // optional double clause_cleanup_increment = 11 [default = 1500];
  inline bool has_clause_cleanup_increment() const;
  inline void clear_clause_cleanup_increment();
  static const int kClauseCleanupIncrementFieldNumber = 11;
  inline double clause_cleanup_increment() const;
  inline void set_clause_cleanup_increment(double value);

  // optional double clause_cleanup_ratio = 13 [default = 0.5];
  inline bool has_clause_cleanup_ratio() const;
  inline void clear_clause_cleanup_ratio();
  static const int kClauseCleanupRatioFieldNumber = 13;
  inline double clause_cleanup_ratio() const;
  inline void set_clause_cleanup_ratio(double value);

  // optional double variable_activity_decay = 15 [default = 0.8];
  inline bool has_variable_activity_decay() const;
  inline void clear_variable_activity_decay();
  static const int kVariableActivityDecayFieldNumber = 15;
  inline double variable_activity_decay() const;
  inline void set_variable_activity_decay(double value);

  // optional double max_variable_activity_value = 16 [default = 1e+100];
  inline bool has_max_variable_activity_value() const;
  inline void clear_max_variable_activity_value();
  static const int kMaxVariableActivityValueFieldNumber = 16;
  inline double max_variable_activity_value() const;
  inline void set_max_variable_activity_value(double value);

  // optional double glucose_max_decay = 22 [default = 0.95];
  inline bool has_glucose_max_decay() const;
  inline void clear_glucose_max_decay();
  static const int kGlucoseMaxDecayFieldNumber = 22;
  inline double glucose_max_decay() const;
  inline void set_glucose_max_decay(double value);

  // optional double glucose_decay_increment = 23 [default = 0.01];
  inline bool has_glucose_decay_increment() const;
  inline void clear_glucose_decay_increment();
  static const int kGlucoseDecayIncrementFieldNumber = 23;
  inline double glucose_decay_increment() const;
  inline void set_glucose_decay_increment(double value);

  // optional double glucose_decay_increment_period = 24 [default = 5000];
  inline bool has_glucose_decay_increment_period() const;
  inline void clear_glucose_decay_increment_period();
  static const int kGlucoseDecayIncrementPeriodFieldNumber = 24;
  inline double glucose_decay_increment_period() const;
  inline void set_glucose_decay_increment_period(double value);

  // optional double clause_activity_decay = 17 [default = 0.999];
  inline bool has_clause_activity_decay() const;
  inline void clear_clause_activity_decay();
  static const int kClauseActivityDecayFieldNumber = 17;
  inline double clause_activity_decay() const;
  inline void set_clause_activity_decay(double value);

  // optional double max_clause_activity_value = 18 [default = 1e+20];
  inline bool has_max_clause_activity_value() const;
  inline void clear_max_clause_activity_value();
  static const int kMaxClauseActivityValueFieldNumber = 18;
  inline double max_clause_activity_value() const;
  inline void set_max_clause_activity_value(double value);

  // optional bool use_lbd = 20 [default = true];
  inline bool has_use_lbd() const;
  inline void clear_use_lbd();
  static const int kUseLbdFieldNumber = 20;
  inline bool use_lbd() const;
  inline void set_use_lbd(bool value);

  // optional bool use_glucose_bump_again_strategy = 21 [default = false];
  inline bool has_use_glucose_bump_again_strategy() const;
  inline void clear_use_glucose_bump_again_strategy();
  static const int kUseGlucoseBumpAgainStrategyFieldNumber = 21;
  inline bool use_glucose_bump_again_strategy() const;
  inline void set_use_glucose_bump_again_strategy(bool value);

  // optional int32 restart_period = 30 [default = 100];
  inline bool has_restart_period() const;
  inline void clear_restart_period();
  static const int kRestartPeriodFieldNumber = 30;
  inline ::google::protobuf::int32 restart_period() const;
  inline void set_restart_period(::google::protobuf::int32 value);

  // optional int32 random_seed = 31 [default = 1];
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 31;
  inline ::google::protobuf::int32 random_seed() const;
  inline void set_random_seed(::google::protobuf::int32 value);

  // optional double random_branches_ratio = 32 [default = 0];
  inline bool has_random_branches_ratio() const;
  inline void clear_random_branches_ratio();
  static const int kRandomBranchesRatioFieldNumber = 32;
  inline double random_branches_ratio() const;
  inline void set_random_branches_ratio(double value);

  // optional bool treat_binary_clauses_separately = 33 [default = true];
  inline bool has_treat_binary_clauses_separately() const;
  inline void clear_treat_binary_clauses_separately();
  static const int kTreatBinaryClausesSeparatelyFieldNumber = 33;
  inline bool treat_binary_clauses_separately() const;
  inline void set_treat_binary_clauses_separately(bool value);

  // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
  inline bool has_binary_minimization_algorithm() const;
  inline void clear_binary_minimization_algorithm();
  static const int kBinaryMinimizationAlgorithmFieldNumber = 34;
  inline ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm binary_minimization_algorithm() const;
  inline void set_binary_minimization_algorithm(::operations_research::sat::SatParameters_BinaryMinizationAlgorithm value);

  // optional bool use_optimization_hints = 35 [default = true];
  inline bool has_use_optimization_hints() const;
  inline void clear_use_optimization_hints();
  static const int kUseOptimizationHintsFieldNumber = 35;
  inline bool use_optimization_hints() const;
  inline void set_use_optimization_hints(bool value);

  // optional double max_time_in_seconds = 36 [default = inf];
  inline bool has_max_time_in_seconds() const;
  inline void clear_max_time_in_seconds();
  static const int kMaxTimeInSecondsFieldNumber = 36;
  inline double max_time_in_seconds() const;
  inline void set_max_time_in_seconds(double value);

  // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
  inline bool has_max_number_of_conflicts() const;
  inline void clear_max_number_of_conflicts();
  static const int kMaxNumberOfConflictsFieldNumber = 37;
  inline ::google::protobuf::int64 max_number_of_conflicts() const;
  inline void set_max_number_of_conflicts(::google::protobuf::int64 value);

  // optional int64 max_memory_in_mb = 40 [default = 4096];
  inline bool has_max_memory_in_mb() const;
  inline void clear_max_memory_in_mb();
  static const int kMaxMemoryInMbFieldNumber = 40;
  inline ::google::protobuf::int64 max_memory_in_mb() const;
  inline void set_max_memory_in_mb(::google::protobuf::int64 value);

  // optional bool log_search_progress = 41 [default = false];
  inline bool has_log_search_progress() const;
  inline void clear_log_search_progress();
  static const int kLogSearchProgressFieldNumber = 41;
  inline bool log_search_progress() const;
  inline void set_log_search_progress(bool value);

  // optional bool unsat_proof = 42 [default = false];
  inline bool has_unsat_proof() const;
  inline void clear_unsat_proof();
  static const int kUnsatProofFieldNumber = 42;
  inline bool unsat_proof() const;
  inline void set_unsat_proof(bool value);

  // optional bool use_pb_resolution = 43 [default = false];
  inline bool has_use_pb_resolution() const;
  inline void clear_use_pb_resolution();
  static const int kUsePbResolutionFieldNumber = 43;
  inline bool use_pb_resolution() const;
  inline void set_use_pb_resolution(bool value);

  // @@protoc_insertion_point(class_scope:operations_research.sat.SatParameters)
 private:
  inline void set_has_preferred_variable_order();
  inline void clear_has_preferred_variable_order();
  inline void set_has_initial_polarity();
  inline void clear_has_initial_polarity();
  inline void set_has_use_phase_saving();
  inline void clear_has_use_phase_saving();
  inline void set_has_random_polarity_ratio();
  inline void clear_has_random_polarity_ratio();
  inline void set_has_literal_ordering();
  inline void clear_has_literal_ordering();
  inline void set_has_minimization_algorithm();
  inline void clear_has_minimization_algorithm();
  inline void set_has_clause_cleanup_increment();
  inline void clear_has_clause_cleanup_increment();
  inline void set_has_clause_cleanup_ratio();
  inline void clear_has_clause_cleanup_ratio();
  inline void set_has_variable_activity_decay();
  inline void clear_has_variable_activity_decay();
  inline void set_has_max_variable_activity_value();
  inline void clear_has_max_variable_activity_value();
  inline void set_has_glucose_max_decay();
  inline void clear_has_glucose_max_decay();
  inline void set_has_glucose_decay_increment();
  inline void clear_has_glucose_decay_increment();
  inline void set_has_glucose_decay_increment_period();
  inline void clear_has_glucose_decay_increment_period();
  inline void set_has_clause_activity_decay();
  inline void clear_has_clause_activity_decay();
  inline void set_has_max_clause_activity_value();
  inline void clear_has_max_clause_activity_value();
  inline void set_has_use_lbd();
  inline void clear_has_use_lbd();
  inline void set_has_use_glucose_bump_again_strategy();
  inline void clear_has_use_glucose_bump_again_strategy();
  inline void set_has_restart_period();
  inline void clear_has_restart_period();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_random_branches_ratio();
  inline void clear_has_random_branches_ratio();
  inline void set_has_treat_binary_clauses_separately();
  inline void clear_has_treat_binary_clauses_separately();
  inline void set_has_binary_minimization_algorithm();
  inline void clear_has_binary_minimization_algorithm();
  inline void set_has_use_optimization_hints();
  inline void clear_has_use_optimization_hints();
  inline void set_has_max_time_in_seconds();
  inline void clear_has_max_time_in_seconds();
  inline void set_has_max_number_of_conflicts();
  inline void clear_has_max_number_of_conflicts();
  inline void set_has_max_memory_in_mb();
  inline void clear_has_max_memory_in_mb();
  inline void set_has_log_search_progress();
  inline void clear_has_log_search_progress();
  inline void set_has_unsat_proof();
  inline void clear_has_unsat_proof();
  inline void set_has_use_pb_resolution();
  inline void clear_has_use_pb_resolution();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int preferred_variable_order_;
  int initial_polarity_;
  double random_polarity_ratio_;
  int literal_ordering_;
  int minimization_algorithm_;
  double clause_cleanup_increment_;
  double clause_cleanup_ratio_;
  double variable_activity_decay_;
  double max_variable_activity_value_;
  double glucose_max_decay_;
  double glucose_decay_increment_;
  double glucose_decay_increment_period_;
  double clause_activity_decay_;
  double max_clause_activity_value_;
  bool use_phase_saving_;
  bool use_lbd_;
  bool use_glucose_bump_again_strategy_;
  bool treat_binary_clauses_separately_;
  ::google::protobuf::int32 restart_period_;
  double random_branches_ratio_;
  ::google::protobuf::int32 random_seed_;
  int binary_minimization_algorithm_;
  double max_time_in_seconds_;
  ::google::protobuf::int64 max_number_of_conflicts_;
  ::google::protobuf::int64 max_memory_in_mb_;
  bool use_optimization_hints_;
  bool log_search_progress_;
  bool unsat_proof_;
  bool use_pb_resolution_;
  friend void  protobuf_AddDesc_sat_2fsat_5fparameters_2eproto();
  friend void protobuf_AssignDesc_sat_2fsat_5fparameters_2eproto();
  friend void protobuf_ShutdownFile_sat_2fsat_5fparameters_2eproto();

  void InitAsDefaultInstance();
  static SatParameters* default_instance_;
};
// ===================================================================


// ===================================================================

// SatParameters

// optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
inline bool SatParameters::has_preferred_variable_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SatParameters::set_has_preferred_variable_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SatParameters::clear_has_preferred_variable_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SatParameters::clear_preferred_variable_order() {
  preferred_variable_order_ = 0;
  clear_has_preferred_variable_order();
}
inline ::operations_research::sat::SatParameters_VariableOrder SatParameters::preferred_variable_order() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.preferred_variable_order)
  return static_cast< ::operations_research::sat::SatParameters_VariableOrder >(preferred_variable_order_);
}
inline void SatParameters::set_preferred_variable_order(::operations_research::sat::SatParameters_VariableOrder value) {
  assert(::operations_research::sat::SatParameters_VariableOrder_IsValid(value));
  set_has_preferred_variable_order();
  preferred_variable_order_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.preferred_variable_order)
}

// optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
inline bool SatParameters::has_initial_polarity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SatParameters::set_has_initial_polarity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SatParameters::clear_has_initial_polarity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SatParameters::clear_initial_polarity() {
  initial_polarity_ = 1;
  clear_has_initial_polarity();
}
inline ::operations_research::sat::SatParameters_Polarity SatParameters::initial_polarity() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.initial_polarity)
  return static_cast< ::operations_research::sat::SatParameters_Polarity >(initial_polarity_);
}
inline void SatParameters::set_initial_polarity(::operations_research::sat::SatParameters_Polarity value) {
  assert(::operations_research::sat::SatParameters_Polarity_IsValid(value));
  set_has_initial_polarity();
  initial_polarity_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.initial_polarity)
}

// optional bool use_phase_saving = 44 [default = true];
inline bool SatParameters::has_use_phase_saving() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SatParameters::set_has_use_phase_saving() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SatParameters::clear_has_use_phase_saving() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SatParameters::clear_use_phase_saving() {
  use_phase_saving_ = true;
  clear_has_use_phase_saving();
}
inline bool SatParameters::use_phase_saving() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.use_phase_saving)
  return use_phase_saving_;
}
inline void SatParameters::set_use_phase_saving(bool value) {
  set_has_use_phase_saving();
  use_phase_saving_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.use_phase_saving)
}

// optional double random_polarity_ratio = 45 [default = 0];
inline bool SatParameters::has_random_polarity_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SatParameters::set_has_random_polarity_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SatParameters::clear_has_random_polarity_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SatParameters::clear_random_polarity_ratio() {
  random_polarity_ratio_ = 0;
  clear_has_random_polarity_ratio();
}
inline double SatParameters::random_polarity_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.random_polarity_ratio)
  return random_polarity_ratio_;
}
inline void SatParameters::set_random_polarity_ratio(double value) {
  set_has_random_polarity_ratio();
  random_polarity_ratio_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.random_polarity_ratio)
}

// optional .operations_research.sat.SatParameters.LiteralOrdering literal_ordering = 3 [default = LITERAL_IN_ORDER];
inline bool SatParameters::has_literal_ordering() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SatParameters::set_has_literal_ordering() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SatParameters::clear_has_literal_ordering() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SatParameters::clear_literal_ordering() {
  literal_ordering_ = 0;
  clear_has_literal_ordering();
}
inline ::operations_research::sat::SatParameters_LiteralOrdering SatParameters::literal_ordering() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.literal_ordering)
  return static_cast< ::operations_research::sat::SatParameters_LiteralOrdering >(literal_ordering_);
}
inline void SatParameters::set_literal_ordering(::operations_research::sat::SatParameters_LiteralOrdering value) {
  assert(::operations_research::sat::SatParameters_LiteralOrdering_IsValid(value));
  set_has_literal_ordering();
  literal_ordering_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.literal_ordering)
}

// optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
inline bool SatParameters::has_minimization_algorithm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SatParameters::set_has_minimization_algorithm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SatParameters::clear_has_minimization_algorithm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SatParameters::clear_minimization_algorithm() {
  minimization_algorithm_ = 2;
  clear_has_minimization_algorithm();
}
inline ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm SatParameters::minimization_algorithm() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.minimization_algorithm)
  return static_cast< ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm >(minimization_algorithm_);
}
inline void SatParameters::set_minimization_algorithm(::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm value) {
  assert(::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm_IsValid(value));
  set_has_minimization_algorithm();
  minimization_algorithm_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.minimization_algorithm)
}

// optional double clause_cleanup_increment = 11 [default = 1500];
inline bool SatParameters::has_clause_cleanup_increment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SatParameters::set_has_clause_cleanup_increment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SatParameters::clear_has_clause_cleanup_increment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SatParameters::clear_clause_cleanup_increment() {
  clause_cleanup_increment_ = 1500;
  clear_has_clause_cleanup_increment();
}
inline double SatParameters::clause_cleanup_increment() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.clause_cleanup_increment)
  return clause_cleanup_increment_;
}
inline void SatParameters::set_clause_cleanup_increment(double value) {
  set_has_clause_cleanup_increment();
  clause_cleanup_increment_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.clause_cleanup_increment)
}

// optional double clause_cleanup_ratio = 13 [default = 0.5];
inline bool SatParameters::has_clause_cleanup_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SatParameters::set_has_clause_cleanup_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SatParameters::clear_has_clause_cleanup_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SatParameters::clear_clause_cleanup_ratio() {
  clause_cleanup_ratio_ = 0.5;
  clear_has_clause_cleanup_ratio();
}
inline double SatParameters::clause_cleanup_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.clause_cleanup_ratio)
  return clause_cleanup_ratio_;
}
inline void SatParameters::set_clause_cleanup_ratio(double value) {
  set_has_clause_cleanup_ratio();
  clause_cleanup_ratio_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.clause_cleanup_ratio)
}

// optional double variable_activity_decay = 15 [default = 0.8];
inline bool SatParameters::has_variable_activity_decay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SatParameters::set_has_variable_activity_decay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SatParameters::clear_has_variable_activity_decay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SatParameters::clear_variable_activity_decay() {
  variable_activity_decay_ = 0.8;
  clear_has_variable_activity_decay();
}
inline double SatParameters::variable_activity_decay() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.variable_activity_decay)
  return variable_activity_decay_;
}
inline void SatParameters::set_variable_activity_decay(double value) {
  set_has_variable_activity_decay();
  variable_activity_decay_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.variable_activity_decay)
}

// optional double max_variable_activity_value = 16 [default = 1e+100];
inline bool SatParameters::has_max_variable_activity_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SatParameters::set_has_max_variable_activity_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SatParameters::clear_has_max_variable_activity_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SatParameters::clear_max_variable_activity_value() {
  max_variable_activity_value_ = 1e+100;
  clear_has_max_variable_activity_value();
}
inline double SatParameters::max_variable_activity_value() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.max_variable_activity_value)
  return max_variable_activity_value_;
}
inline void SatParameters::set_max_variable_activity_value(double value) {
  set_has_max_variable_activity_value();
  max_variable_activity_value_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.max_variable_activity_value)
}

// optional double glucose_max_decay = 22 [default = 0.95];
inline bool SatParameters::has_glucose_max_decay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SatParameters::set_has_glucose_max_decay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SatParameters::clear_has_glucose_max_decay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SatParameters::clear_glucose_max_decay() {
  glucose_max_decay_ = 0.95;
  clear_has_glucose_max_decay();
}
inline double SatParameters::glucose_max_decay() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.glucose_max_decay)
  return glucose_max_decay_;
}
inline void SatParameters::set_glucose_max_decay(double value) {
  set_has_glucose_max_decay();
  glucose_max_decay_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.glucose_max_decay)
}

// optional double glucose_decay_increment = 23 [default = 0.01];
inline bool SatParameters::has_glucose_decay_increment() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SatParameters::set_has_glucose_decay_increment() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SatParameters::clear_has_glucose_decay_increment() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SatParameters::clear_glucose_decay_increment() {
  glucose_decay_increment_ = 0.01;
  clear_has_glucose_decay_increment();
}
inline double SatParameters::glucose_decay_increment() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.glucose_decay_increment)
  return glucose_decay_increment_;
}
inline void SatParameters::set_glucose_decay_increment(double value) {
  set_has_glucose_decay_increment();
  glucose_decay_increment_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.glucose_decay_increment)
}

// optional double glucose_decay_increment_period = 24 [default = 5000];
inline bool SatParameters::has_glucose_decay_increment_period() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SatParameters::set_has_glucose_decay_increment_period() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SatParameters::clear_has_glucose_decay_increment_period() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SatParameters::clear_glucose_decay_increment_period() {
  glucose_decay_increment_period_ = 5000;
  clear_has_glucose_decay_increment_period();
}
inline double SatParameters::glucose_decay_increment_period() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.glucose_decay_increment_period)
  return glucose_decay_increment_period_;
}
inline void SatParameters::set_glucose_decay_increment_period(double value) {
  set_has_glucose_decay_increment_period();
  glucose_decay_increment_period_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.glucose_decay_increment_period)
}

// optional double clause_activity_decay = 17 [default = 0.999];
inline bool SatParameters::has_clause_activity_decay() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SatParameters::set_has_clause_activity_decay() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SatParameters::clear_has_clause_activity_decay() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SatParameters::clear_clause_activity_decay() {
  clause_activity_decay_ = 0.999;
  clear_has_clause_activity_decay();
}
inline double SatParameters::clause_activity_decay() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.clause_activity_decay)
  return clause_activity_decay_;
}
inline void SatParameters::set_clause_activity_decay(double value) {
  set_has_clause_activity_decay();
  clause_activity_decay_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.clause_activity_decay)
}

// optional double max_clause_activity_value = 18 [default = 1e+20];
inline bool SatParameters::has_max_clause_activity_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SatParameters::set_has_max_clause_activity_value() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SatParameters::clear_has_max_clause_activity_value() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SatParameters::clear_max_clause_activity_value() {
  max_clause_activity_value_ = 1e+20;
  clear_has_max_clause_activity_value();
}
inline double SatParameters::max_clause_activity_value() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.max_clause_activity_value)
  return max_clause_activity_value_;
}
inline void SatParameters::set_max_clause_activity_value(double value) {
  set_has_max_clause_activity_value();
  max_clause_activity_value_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.max_clause_activity_value)
}

// optional bool use_lbd = 20 [default = true];
inline bool SatParameters::has_use_lbd() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SatParameters::set_has_use_lbd() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SatParameters::clear_has_use_lbd() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SatParameters::clear_use_lbd() {
  use_lbd_ = true;
  clear_has_use_lbd();
}
inline bool SatParameters::use_lbd() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.use_lbd)
  return use_lbd_;
}
inline void SatParameters::set_use_lbd(bool value) {
  set_has_use_lbd();
  use_lbd_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.use_lbd)
}

// optional bool use_glucose_bump_again_strategy = 21 [default = false];
inline bool SatParameters::has_use_glucose_bump_again_strategy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SatParameters::set_has_use_glucose_bump_again_strategy() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SatParameters::clear_has_use_glucose_bump_again_strategy() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SatParameters::clear_use_glucose_bump_again_strategy() {
  use_glucose_bump_again_strategy_ = false;
  clear_has_use_glucose_bump_again_strategy();
}
inline bool SatParameters::use_glucose_bump_again_strategy() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.use_glucose_bump_again_strategy)
  return use_glucose_bump_again_strategy_;
}
inline void SatParameters::set_use_glucose_bump_again_strategy(bool value) {
  set_has_use_glucose_bump_again_strategy();
  use_glucose_bump_again_strategy_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.use_glucose_bump_again_strategy)
}

// optional int32 restart_period = 30 [default = 100];
inline bool SatParameters::has_restart_period() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SatParameters::set_has_restart_period() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SatParameters::clear_has_restart_period() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SatParameters::clear_restart_period() {
  restart_period_ = 100;
  clear_has_restart_period();
}
inline ::google::protobuf::int32 SatParameters::restart_period() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.restart_period)
  return restart_period_;
}
inline void SatParameters::set_restart_period(::google::protobuf::int32 value) {
  set_has_restart_period();
  restart_period_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.restart_period)
}

// optional int32 random_seed = 31 [default = 1];
inline bool SatParameters::has_random_seed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SatParameters::set_has_random_seed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SatParameters::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SatParameters::clear_random_seed() {
  random_seed_ = 1;
  clear_has_random_seed();
}
inline ::google::protobuf::int32 SatParameters::random_seed() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.random_seed)
  return random_seed_;
}
inline void SatParameters::set_random_seed(::google::protobuf::int32 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.random_seed)
}

// optional double random_branches_ratio = 32 [default = 0];
inline bool SatParameters::has_random_branches_ratio() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SatParameters::set_has_random_branches_ratio() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SatParameters::clear_has_random_branches_ratio() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SatParameters::clear_random_branches_ratio() {
  random_branches_ratio_ = 0;
  clear_has_random_branches_ratio();
}
inline double SatParameters::random_branches_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.random_branches_ratio)
  return random_branches_ratio_;
}
inline void SatParameters::set_random_branches_ratio(double value) {
  set_has_random_branches_ratio();
  random_branches_ratio_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.random_branches_ratio)
}

// optional bool treat_binary_clauses_separately = 33 [default = true];
inline bool SatParameters::has_treat_binary_clauses_separately() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SatParameters::set_has_treat_binary_clauses_separately() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SatParameters::clear_has_treat_binary_clauses_separately() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SatParameters::clear_treat_binary_clauses_separately() {
  treat_binary_clauses_separately_ = true;
  clear_has_treat_binary_clauses_separately();
}
inline bool SatParameters::treat_binary_clauses_separately() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.treat_binary_clauses_separately)
  return treat_binary_clauses_separately_;
}
inline void SatParameters::set_treat_binary_clauses_separately(bool value) {
  set_has_treat_binary_clauses_separately();
  treat_binary_clauses_separately_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.treat_binary_clauses_separately)
}

// optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
inline bool SatParameters::has_binary_minimization_algorithm() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SatParameters::set_has_binary_minimization_algorithm() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SatParameters::clear_has_binary_minimization_algorithm() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SatParameters::clear_binary_minimization_algorithm() {
  binary_minimization_algorithm_ = 1;
  clear_has_binary_minimization_algorithm();
}
inline ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm SatParameters::binary_minimization_algorithm() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.binary_minimization_algorithm)
  return static_cast< ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm >(binary_minimization_algorithm_);
}
inline void SatParameters::set_binary_minimization_algorithm(::operations_research::sat::SatParameters_BinaryMinizationAlgorithm value) {
  assert(::operations_research::sat::SatParameters_BinaryMinizationAlgorithm_IsValid(value));
  set_has_binary_minimization_algorithm();
  binary_minimization_algorithm_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.binary_minimization_algorithm)
}

// optional bool use_optimization_hints = 35 [default = true];
inline bool SatParameters::has_use_optimization_hints() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SatParameters::set_has_use_optimization_hints() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SatParameters::clear_has_use_optimization_hints() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SatParameters::clear_use_optimization_hints() {
  use_optimization_hints_ = true;
  clear_has_use_optimization_hints();
}
inline bool SatParameters::use_optimization_hints() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.use_optimization_hints)
  return use_optimization_hints_;
}
inline void SatParameters::set_use_optimization_hints(bool value) {
  set_has_use_optimization_hints();
  use_optimization_hints_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.use_optimization_hints)
}

// optional double max_time_in_seconds = 36 [default = inf];
inline bool SatParameters::has_max_time_in_seconds() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SatParameters::set_has_max_time_in_seconds() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SatParameters::clear_has_max_time_in_seconds() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SatParameters::clear_max_time_in_seconds() {
  max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
  clear_has_max_time_in_seconds();
}
inline double SatParameters::max_time_in_seconds() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.max_time_in_seconds)
  return max_time_in_seconds_;
}
inline void SatParameters::set_max_time_in_seconds(double value) {
  set_has_max_time_in_seconds();
  max_time_in_seconds_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.max_time_in_seconds)
}

// optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
inline bool SatParameters::has_max_number_of_conflicts() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SatParameters::set_has_max_number_of_conflicts() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SatParameters::clear_has_max_number_of_conflicts() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SatParameters::clear_max_number_of_conflicts() {
  max_number_of_conflicts_ = GOOGLE_LONGLONG(9223372036854775807);
  clear_has_max_number_of_conflicts();
}
inline ::google::protobuf::int64 SatParameters::max_number_of_conflicts() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.max_number_of_conflicts)
  return max_number_of_conflicts_;
}
inline void SatParameters::set_max_number_of_conflicts(::google::protobuf::int64 value) {
  set_has_max_number_of_conflicts();
  max_number_of_conflicts_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.max_number_of_conflicts)
}

// optional int64 max_memory_in_mb = 40 [default = 4096];
inline bool SatParameters::has_max_memory_in_mb() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SatParameters::set_has_max_memory_in_mb() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SatParameters::clear_has_max_memory_in_mb() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SatParameters::clear_max_memory_in_mb() {
  max_memory_in_mb_ = GOOGLE_LONGLONG(4096);
  clear_has_max_memory_in_mb();
}
inline ::google::protobuf::int64 SatParameters::max_memory_in_mb() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.max_memory_in_mb)
  return max_memory_in_mb_;
}
inline void SatParameters::set_max_memory_in_mb(::google::protobuf::int64 value) {
  set_has_max_memory_in_mb();
  max_memory_in_mb_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.max_memory_in_mb)
}

// optional bool log_search_progress = 41 [default = false];
inline bool SatParameters::has_log_search_progress() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SatParameters::set_has_log_search_progress() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SatParameters::clear_has_log_search_progress() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SatParameters::clear_log_search_progress() {
  log_search_progress_ = false;
  clear_has_log_search_progress();
}
inline bool SatParameters::log_search_progress() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.log_search_progress)
  return log_search_progress_;
}
inline void SatParameters::set_log_search_progress(bool value) {
  set_has_log_search_progress();
  log_search_progress_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.log_search_progress)
}

// optional bool unsat_proof = 42 [default = false];
inline bool SatParameters::has_unsat_proof() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SatParameters::set_has_unsat_proof() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SatParameters::clear_has_unsat_proof() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SatParameters::clear_unsat_proof() {
  unsat_proof_ = false;
  clear_has_unsat_proof();
}
inline bool SatParameters::unsat_proof() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.unsat_proof)
  return unsat_proof_;
}
inline void SatParameters::set_unsat_proof(bool value) {
  set_has_unsat_proof();
  unsat_proof_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.unsat_proof)
}

// optional bool use_pb_resolution = 43 [default = false];
inline bool SatParameters::has_use_pb_resolution() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SatParameters::set_has_use_pb_resolution() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SatParameters::clear_has_use_pb_resolution() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SatParameters::clear_use_pb_resolution() {
  use_pb_resolution_ = false;
  clear_has_use_pb_resolution();
}
inline bool SatParameters::use_pb_resolution() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SatParameters.use_pb_resolution)
  return use_pb_resolution_;
}
inline void SatParameters::set_use_pb_resolution(bool value) {
  set_has_use_pb_resolution();
  use_pb_resolution_ = value;
  // @@protoc_insertion_point(field_set:operations_research.sat.SatParameters.use_pb_resolution)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sat
}  // namespace operations_research

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::operations_research::sat::SatParameters_VariableOrder> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::sat::SatParameters_VariableOrder>() {
  return ::operations_research::sat::SatParameters_VariableOrder_descriptor();
}
template <> struct is_proto_enum< ::operations_research::sat::SatParameters_Polarity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::sat::SatParameters_Polarity>() {
  return ::operations_research::sat::SatParameters_Polarity_descriptor();
}
template <> struct is_proto_enum< ::operations_research::sat::SatParameters_LiteralOrdering> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::sat::SatParameters_LiteralOrdering>() {
  return ::operations_research::sat::SatParameters_LiteralOrdering_descriptor();
}
template <> struct is_proto_enum< ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm>() {
  return ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm>() {
  return ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sat_2fsat_5fparameters_2eproto__INCLUDED
