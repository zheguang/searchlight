// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sat/boolean_problem.proto

#ifndef PROTOBUF_sat_2fboolean_5fproblem_2eproto__INCLUDED
#define PROTOBUF_sat_2fboolean_5fproblem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace operations_research {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
void protobuf_AssignDesc_sat_2fboolean_5fproblem_2eproto();
void protobuf_ShutdownFile_sat_2fboolean_5fproblem_2eproto();

class LinearBooleanConstraint;
class LinearObjective;
class BooleanAssignment;
class LinearBooleanProblem;

enum LinearBooleanProblem_ProblemType {
  LinearBooleanProblem_ProblemType_SATISFIABILITY = 0,
  LinearBooleanProblem_ProblemType_MAXIMIZATION = 1,
  LinearBooleanProblem_ProblemType_MINIMIZATION = 2
};
bool LinearBooleanProblem_ProblemType_IsValid(int value);
const LinearBooleanProblem_ProblemType LinearBooleanProblem_ProblemType_ProblemType_MIN = LinearBooleanProblem_ProblemType_SATISFIABILITY;
const LinearBooleanProblem_ProblemType LinearBooleanProblem_ProblemType_ProblemType_MAX = LinearBooleanProblem_ProblemType_MINIMIZATION;
const int LinearBooleanProblem_ProblemType_ProblemType_ARRAYSIZE = LinearBooleanProblem_ProblemType_ProblemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinearBooleanProblem_ProblemType_descriptor();
inline const ::std::string& LinearBooleanProblem_ProblemType_Name(LinearBooleanProblem_ProblemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinearBooleanProblem_ProblemType_descriptor(), value);
}
inline bool LinearBooleanProblem_ProblemType_Parse(
    const ::std::string& name, LinearBooleanProblem_ProblemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinearBooleanProblem_ProblemType>(
    LinearBooleanProblem_ProblemType_descriptor(), name, value);
}
// ===================================================================

class LinearBooleanConstraint : public ::google::protobuf::Message {
 public:
  LinearBooleanConstraint();
  virtual ~LinearBooleanConstraint();

  LinearBooleanConstraint(const LinearBooleanConstraint& from);

  inline LinearBooleanConstraint& operator=(const LinearBooleanConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinearBooleanConstraint& default_instance();

  void Swap(LinearBooleanConstraint* other);

  // implements Message ----------------------------------------------

  LinearBooleanConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinearBooleanConstraint& from);
  void MergeFrom(const LinearBooleanConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 literals = 1;
  inline int literals_size() const;
  inline void clear_literals();
  static const int kLiteralsFieldNumber = 1;
  inline ::google::protobuf::int32 literals(int index) const;
  inline void set_literals(int index, ::google::protobuf::int32 value);
  inline void add_literals(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      literals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_literals();

  // repeated int64 coefficients = 2;
  inline int coefficients_size() const;
  inline void clear_coefficients();
  static const int kCoefficientsFieldNumber = 2;
  inline ::google::protobuf::int64 coefficients(int index) const;
  inline void set_coefficients(int index, ::google::protobuf::int64 value);
  inline void add_coefficients(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      coefficients() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_coefficients();

  // optional int64 lower_bound = 3;
  inline bool has_lower_bound() const;
  inline void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 3;
  inline ::google::protobuf::int64 lower_bound() const;
  inline void set_lower_bound(::google::protobuf::int64 value);

  // optional int64 upper_bound = 4;
  inline bool has_upper_bound() const;
  inline void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 4;
  inline ::google::protobuf::int64 upper_bound() const;
  inline void set_upper_bound(::google::protobuf::int64 value);

  // optional string name = 5 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:operations_research.LinearBooleanConstraint)
 private:
  inline void set_has_lower_bound();
  inline void clear_has_lower_bound();
  inline void set_has_upper_bound();
  inline void clear_has_upper_bound();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > literals_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > coefficients_;
  ::google::protobuf::int64 lower_bound_;
  ::google::protobuf::int64 upper_bound_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  friend void protobuf_AssignDesc_sat_2fboolean_5fproblem_2eproto();
  friend void protobuf_ShutdownFile_sat_2fboolean_5fproblem_2eproto();

  void InitAsDefaultInstance();
  static LinearBooleanConstraint* default_instance_;
};
// -------------------------------------------------------------------

class LinearObjective : public ::google::protobuf::Message {
 public:
  LinearObjective();
  virtual ~LinearObjective();

  LinearObjective(const LinearObjective& from);

  inline LinearObjective& operator=(const LinearObjective& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinearObjective& default_instance();

  void Swap(LinearObjective* other);

  // implements Message ----------------------------------------------

  LinearObjective* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinearObjective& from);
  void MergeFrom(const LinearObjective& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 literals = 1;
  inline int literals_size() const;
  inline void clear_literals();
  static const int kLiteralsFieldNumber = 1;
  inline ::google::protobuf::int32 literals(int index) const;
  inline void set_literals(int index, ::google::protobuf::int32 value);
  inline void add_literals(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      literals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_literals();

  // repeated int64 coefficients = 2;
  inline int coefficients_size() const;
  inline void clear_coefficients();
  static const int kCoefficientsFieldNumber = 2;
  inline ::google::protobuf::int64 coefficients(int index) const;
  inline void set_coefficients(int index, ::google::protobuf::int64 value);
  inline void add_coefficients(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      coefficients() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_coefficients();

  // optional double offset = 3 [default = 0];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline double offset() const;
  inline void set_offset(double value);

  // optional double scaling_factor = 4 [default = 1];
  inline bool has_scaling_factor() const;
  inline void clear_scaling_factor();
  static const int kScalingFactorFieldNumber = 4;
  inline double scaling_factor() const;
  inline void set_scaling_factor(double value);

  // @@protoc_insertion_point(class_scope:operations_research.LinearObjective)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_scaling_factor();
  inline void clear_has_scaling_factor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > literals_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > coefficients_;
  double offset_;
  double scaling_factor_;
  friend void  protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  friend void protobuf_AssignDesc_sat_2fboolean_5fproblem_2eproto();
  friend void protobuf_ShutdownFile_sat_2fboolean_5fproblem_2eproto();

  void InitAsDefaultInstance();
  static LinearObjective* default_instance_;
};
// -------------------------------------------------------------------

class BooleanAssignment : public ::google::protobuf::Message {
 public:
  BooleanAssignment();
  virtual ~BooleanAssignment();

  BooleanAssignment(const BooleanAssignment& from);

  inline BooleanAssignment& operator=(const BooleanAssignment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BooleanAssignment& default_instance();

  void Swap(BooleanAssignment* other);

  // implements Message ----------------------------------------------

  BooleanAssignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BooleanAssignment& from);
  void MergeFrom(const BooleanAssignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 literals = 1;
  inline int literals_size() const;
  inline void clear_literals();
  static const int kLiteralsFieldNumber = 1;
  inline ::google::protobuf::int32 literals(int index) const;
  inline void set_literals(int index, ::google::protobuf::int32 value);
  inline void add_literals(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      literals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_literals();

  // @@protoc_insertion_point(class_scope:operations_research.BooleanAssignment)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > literals_;
  friend void  protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  friend void protobuf_AssignDesc_sat_2fboolean_5fproblem_2eproto();
  friend void protobuf_ShutdownFile_sat_2fboolean_5fproblem_2eproto();

  void InitAsDefaultInstance();
  static BooleanAssignment* default_instance_;
};
// -------------------------------------------------------------------

class LinearBooleanProblem : public ::google::protobuf::Message {
 public:
  LinearBooleanProblem();
  virtual ~LinearBooleanProblem();

  LinearBooleanProblem(const LinearBooleanProblem& from);

  inline LinearBooleanProblem& operator=(const LinearBooleanProblem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinearBooleanProblem& default_instance();

  void Swap(LinearBooleanProblem* other);

  // implements Message ----------------------------------------------

  LinearBooleanProblem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinearBooleanProblem& from);
  void MergeFrom(const LinearBooleanProblem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LinearBooleanProblem_ProblemType ProblemType;
  static const ProblemType SATISFIABILITY = LinearBooleanProblem_ProblemType_SATISFIABILITY;
  static const ProblemType MAXIMIZATION = LinearBooleanProblem_ProblemType_MAXIMIZATION;
  static const ProblemType MINIMIZATION = LinearBooleanProblem_ProblemType_MINIMIZATION;
  static inline bool ProblemType_IsValid(int value) {
    return LinearBooleanProblem_ProblemType_IsValid(value);
  }
  static const ProblemType ProblemType_MIN =
    LinearBooleanProblem_ProblemType_ProblemType_MIN;
  static const ProblemType ProblemType_MAX =
    LinearBooleanProblem_ProblemType_ProblemType_MAX;
  static const int ProblemType_ARRAYSIZE =
    LinearBooleanProblem_ProblemType_ProblemType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProblemType_descriptor() {
    return LinearBooleanProblem_ProblemType_descriptor();
  }
  static inline const ::std::string& ProblemType_Name(ProblemType value) {
    return LinearBooleanProblem_ProblemType_Name(value);
  }
  static inline bool ProblemType_Parse(const ::std::string& name,
      ProblemType* value) {
    return LinearBooleanProblem_ProblemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .operations_research.LinearBooleanProblem.ProblemType type = 2 [default = SATISFIABILITY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::operations_research::LinearBooleanProblem_ProblemType type() const;
  inline void set_type(::operations_research::LinearBooleanProblem_ProblemType value);

  // optional int32 num_variables = 3;
  inline bool has_num_variables() const;
  inline void clear_num_variables();
  static const int kNumVariablesFieldNumber = 3;
  inline ::google::protobuf::int32 num_variables() const;
  inline void set_num_variables(::google::protobuf::int32 value);

  // repeated .operations_research.LinearBooleanConstraint constraints = 4;
  inline int constraints_size() const;
  inline void clear_constraints();
  static const int kConstraintsFieldNumber = 4;
  inline const ::operations_research::LinearBooleanConstraint& constraints(int index) const;
  inline ::operations_research::LinearBooleanConstraint* mutable_constraints(int index);
  inline ::operations_research::LinearBooleanConstraint* add_constraints();
  inline const ::google::protobuf::RepeatedPtrField< ::operations_research::LinearBooleanConstraint >&
      constraints() const;
  inline ::google::protobuf::RepeatedPtrField< ::operations_research::LinearBooleanConstraint >*
      mutable_constraints();

  // optional .operations_research.LinearObjective objective = 5;
  inline bool has_objective() const;
  inline void clear_objective();
  static const int kObjectiveFieldNumber = 5;
  inline const ::operations_research::LinearObjective& objective() const;
  inline ::operations_research::LinearObjective* mutable_objective();
  inline ::operations_research::LinearObjective* release_objective();
  inline void set_allocated_objective(::operations_research::LinearObjective* objective);

  // repeated string var_names = 6;
  inline int var_names_size() const;
  inline void clear_var_names();
  static const int kVarNamesFieldNumber = 6;
  inline const ::std::string& var_names(int index) const;
  inline ::std::string* mutable_var_names(int index);
  inline void set_var_names(int index, const ::std::string& value);
  inline void set_var_names(int index, const char* value);
  inline void set_var_names(int index, const char* value, size_t size);
  inline ::std::string* add_var_names();
  inline void add_var_names(const ::std::string& value);
  inline void add_var_names(const char* value);
  inline void add_var_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& var_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_var_names();

  // optional .operations_research.BooleanAssignment assignment = 7;
  inline bool has_assignment() const;
  inline void clear_assignment();
  static const int kAssignmentFieldNumber = 7;
  inline const ::operations_research::BooleanAssignment& assignment() const;
  inline ::operations_research::BooleanAssignment* mutable_assignment();
  inline ::operations_research::BooleanAssignment* release_assignment();
  inline void set_allocated_assignment(::operations_research::BooleanAssignment* assignment);

  // optional int32 original_num_variables = 8;
  inline bool has_original_num_variables() const;
  inline void clear_original_num_variables();
  static const int kOriginalNumVariablesFieldNumber = 8;
  inline ::google::protobuf::int32 original_num_variables() const;
  inline void set_original_num_variables(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:operations_research.LinearBooleanProblem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_variables();
  inline void clear_has_num_variables();
  inline void set_has_objective();
  inline void clear_has_objective();
  inline void set_has_assignment();
  inline void clear_has_assignment();
  inline void set_has_original_num_variables();
  inline void clear_has_original_num_variables();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 num_variables_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::LinearBooleanConstraint > constraints_;
  ::operations_research::LinearObjective* objective_;
  ::google::protobuf::RepeatedPtrField< ::std::string> var_names_;
  ::operations_research::BooleanAssignment* assignment_;
  ::google::protobuf::int32 original_num_variables_;
  friend void  protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  friend void protobuf_AssignDesc_sat_2fboolean_5fproblem_2eproto();
  friend void protobuf_ShutdownFile_sat_2fboolean_5fproblem_2eproto();

  void InitAsDefaultInstance();
  static LinearBooleanProblem* default_instance_;
};
// ===================================================================


// ===================================================================

// LinearBooleanConstraint

// repeated int32 literals = 1;
inline int LinearBooleanConstraint::literals_size() const {
  return literals_.size();
}
inline void LinearBooleanConstraint::clear_literals() {
  literals_.Clear();
}
inline ::google::protobuf::int32 LinearBooleanConstraint::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanConstraint.literals)
  return literals_.Get(index);
}
inline void LinearBooleanConstraint::set_literals(int index, ::google::protobuf::int32 value) {
  literals_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanConstraint.literals)
}
inline void LinearBooleanConstraint::add_literals(::google::protobuf::int32 value) {
  literals_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.LinearBooleanConstraint.literals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LinearBooleanConstraint::literals() const {
  // @@protoc_insertion_point(field_list:operations_research.LinearBooleanConstraint.literals)
  return literals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LinearBooleanConstraint::mutable_literals() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.LinearBooleanConstraint.literals)
  return &literals_;
}

// repeated int64 coefficients = 2;
inline int LinearBooleanConstraint::coefficients_size() const {
  return coefficients_.size();
}
inline void LinearBooleanConstraint::clear_coefficients() {
  coefficients_.Clear();
}
inline ::google::protobuf::int64 LinearBooleanConstraint::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanConstraint.coefficients)
  return coefficients_.Get(index);
}
inline void LinearBooleanConstraint::set_coefficients(int index, ::google::protobuf::int64 value) {
  coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanConstraint.coefficients)
}
inline void LinearBooleanConstraint::add_coefficients(::google::protobuf::int64 value) {
  coefficients_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.LinearBooleanConstraint.coefficients)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LinearBooleanConstraint::coefficients() const {
  // @@protoc_insertion_point(field_list:operations_research.LinearBooleanConstraint.coefficients)
  return coefficients_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LinearBooleanConstraint::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.LinearBooleanConstraint.coefficients)
  return &coefficients_;
}

// optional int64 lower_bound = 3;
inline bool LinearBooleanConstraint::has_lower_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinearBooleanConstraint::set_has_lower_bound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinearBooleanConstraint::clear_has_lower_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinearBooleanConstraint::clear_lower_bound() {
  lower_bound_ = GOOGLE_LONGLONG(0);
  clear_has_lower_bound();
}
inline ::google::protobuf::int64 LinearBooleanConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanConstraint.lower_bound)
  return lower_bound_;
}
inline void LinearBooleanConstraint::set_lower_bound(::google::protobuf::int64 value) {
  set_has_lower_bound();
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanConstraint.lower_bound)
}

// optional int64 upper_bound = 4;
inline bool LinearBooleanConstraint::has_upper_bound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LinearBooleanConstraint::set_has_upper_bound() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LinearBooleanConstraint::clear_has_upper_bound() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LinearBooleanConstraint::clear_upper_bound() {
  upper_bound_ = GOOGLE_LONGLONG(0);
  clear_has_upper_bound();
}
inline ::google::protobuf::int64 LinearBooleanConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanConstraint.upper_bound)
  return upper_bound_;
}
inline void LinearBooleanConstraint::set_upper_bound(::google::protobuf::int64 value) {
  set_has_upper_bound();
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanConstraint.upper_bound)
}

// optional string name = 5 [default = ""];
inline bool LinearBooleanConstraint::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LinearBooleanConstraint::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LinearBooleanConstraint::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LinearBooleanConstraint::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LinearBooleanConstraint::name() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanConstraint.name)
  return *name_;
}
inline void LinearBooleanConstraint::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanConstraint.name)
}
inline void LinearBooleanConstraint::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:operations_research.LinearBooleanConstraint.name)
}
inline void LinearBooleanConstraint::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations_research.LinearBooleanConstraint.name)
}
inline ::std::string* LinearBooleanConstraint::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:operations_research.LinearBooleanConstraint.name)
  return name_;
}
inline ::std::string* LinearBooleanConstraint::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LinearBooleanConstraint::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.LinearBooleanConstraint.name)
}

// -------------------------------------------------------------------

// LinearObjective

// repeated int32 literals = 1;
inline int LinearObjective::literals_size() const {
  return literals_.size();
}
inline void LinearObjective::clear_literals() {
  literals_.Clear();
}
inline ::google::protobuf::int32 LinearObjective::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.LinearObjective.literals)
  return literals_.Get(index);
}
inline void LinearObjective::set_literals(int index, ::google::protobuf::int32 value) {
  literals_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.LinearObjective.literals)
}
inline void LinearObjective::add_literals(::google::protobuf::int32 value) {
  literals_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.LinearObjective.literals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LinearObjective::literals() const {
  // @@protoc_insertion_point(field_list:operations_research.LinearObjective.literals)
  return literals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LinearObjective::mutable_literals() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.LinearObjective.literals)
  return &literals_;
}

// repeated int64 coefficients = 2;
inline int LinearObjective::coefficients_size() const {
  return coefficients_.size();
}
inline void LinearObjective::clear_coefficients() {
  coefficients_.Clear();
}
inline ::google::protobuf::int64 LinearObjective::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.LinearObjective.coefficients)
  return coefficients_.Get(index);
}
inline void LinearObjective::set_coefficients(int index, ::google::protobuf::int64 value) {
  coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.LinearObjective.coefficients)
}
inline void LinearObjective::add_coefficients(::google::protobuf::int64 value) {
  coefficients_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.LinearObjective.coefficients)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LinearObjective::coefficients() const {
  // @@protoc_insertion_point(field_list:operations_research.LinearObjective.coefficients)
  return coefficients_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LinearObjective::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.LinearObjective.coefficients)
  return &coefficients_;
}

// optional double offset = 3 [default = 0];
inline bool LinearObjective::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinearObjective::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinearObjective::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinearObjective::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline double LinearObjective::offset() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearObjective.offset)
  return offset_;
}
inline void LinearObjective::set_offset(double value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:operations_research.LinearObjective.offset)
}

// optional double scaling_factor = 4 [default = 1];
inline bool LinearObjective::has_scaling_factor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LinearObjective::set_has_scaling_factor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LinearObjective::clear_has_scaling_factor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LinearObjective::clear_scaling_factor() {
  scaling_factor_ = 1;
  clear_has_scaling_factor();
}
inline double LinearObjective::scaling_factor() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearObjective.scaling_factor)
  return scaling_factor_;
}
inline void LinearObjective::set_scaling_factor(double value) {
  set_has_scaling_factor();
  scaling_factor_ = value;
  // @@protoc_insertion_point(field_set:operations_research.LinearObjective.scaling_factor)
}

// -------------------------------------------------------------------

// BooleanAssignment

// repeated int32 literals = 1;
inline int BooleanAssignment::literals_size() const {
  return literals_.size();
}
inline void BooleanAssignment::clear_literals() {
  literals_.Clear();
}
inline ::google::protobuf::int32 BooleanAssignment::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.BooleanAssignment.literals)
  return literals_.Get(index);
}
inline void BooleanAssignment::set_literals(int index, ::google::protobuf::int32 value) {
  literals_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.BooleanAssignment.literals)
}
inline void BooleanAssignment::add_literals(::google::protobuf::int32 value) {
  literals_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.BooleanAssignment.literals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BooleanAssignment::literals() const {
  // @@protoc_insertion_point(field_list:operations_research.BooleanAssignment.literals)
  return literals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BooleanAssignment::mutable_literals() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.BooleanAssignment.literals)
  return &literals_;
}

// -------------------------------------------------------------------

// LinearBooleanProblem

// optional string name = 1 [default = ""];
inline bool LinearBooleanProblem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinearBooleanProblem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinearBooleanProblem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinearBooleanProblem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LinearBooleanProblem::name() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanProblem.name)
  return *name_;
}
inline void LinearBooleanProblem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanProblem.name)
}
inline void LinearBooleanProblem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:operations_research.LinearBooleanProblem.name)
}
inline void LinearBooleanProblem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations_research.LinearBooleanProblem.name)
}
inline ::std::string* LinearBooleanProblem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:operations_research.LinearBooleanProblem.name)
  return name_;
}
inline ::std::string* LinearBooleanProblem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LinearBooleanProblem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.LinearBooleanProblem.name)
}

// optional .operations_research.LinearBooleanProblem.ProblemType type = 2 [default = SATISFIABILITY];
inline bool LinearBooleanProblem::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinearBooleanProblem::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinearBooleanProblem::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinearBooleanProblem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::operations_research::LinearBooleanProblem_ProblemType LinearBooleanProblem::type() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanProblem.type)
  return static_cast< ::operations_research::LinearBooleanProblem_ProblemType >(type_);
}
inline void LinearBooleanProblem::set_type(::operations_research::LinearBooleanProblem_ProblemType value) {
  assert(::operations_research::LinearBooleanProblem_ProblemType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanProblem.type)
}

// optional int32 num_variables = 3;
inline bool LinearBooleanProblem::has_num_variables() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinearBooleanProblem::set_has_num_variables() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinearBooleanProblem::clear_has_num_variables() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinearBooleanProblem::clear_num_variables() {
  num_variables_ = 0;
  clear_has_num_variables();
}
inline ::google::protobuf::int32 LinearBooleanProblem::num_variables() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanProblem.num_variables)
  return num_variables_;
}
inline void LinearBooleanProblem::set_num_variables(::google::protobuf::int32 value) {
  set_has_num_variables();
  num_variables_ = value;
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanProblem.num_variables)
}

// repeated .operations_research.LinearBooleanConstraint constraints = 4;
inline int LinearBooleanProblem::constraints_size() const {
  return constraints_.size();
}
inline void LinearBooleanProblem::clear_constraints() {
  constraints_.Clear();
}
inline const ::operations_research::LinearBooleanConstraint& LinearBooleanProblem::constraints(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanProblem.constraints)
  return constraints_.Get(index);
}
inline ::operations_research::LinearBooleanConstraint* LinearBooleanProblem::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.LinearBooleanProblem.constraints)
  return constraints_.Mutable(index);
}
inline ::operations_research::LinearBooleanConstraint* LinearBooleanProblem::add_constraints() {
  // @@protoc_insertion_point(field_add:operations_research.LinearBooleanProblem.constraints)
  return constraints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::LinearBooleanConstraint >&
LinearBooleanProblem::constraints() const {
  // @@protoc_insertion_point(field_list:operations_research.LinearBooleanProblem.constraints)
  return constraints_;
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::LinearBooleanConstraint >*
LinearBooleanProblem::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.LinearBooleanProblem.constraints)
  return &constraints_;
}

// optional .operations_research.LinearObjective objective = 5;
inline bool LinearBooleanProblem::has_objective() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LinearBooleanProblem::set_has_objective() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LinearBooleanProblem::clear_has_objective() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LinearBooleanProblem::clear_objective() {
  if (objective_ != NULL) objective_->::operations_research::LinearObjective::Clear();
  clear_has_objective();
}
inline const ::operations_research::LinearObjective& LinearBooleanProblem::objective() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanProblem.objective)
  return objective_ != NULL ? *objective_ : *default_instance_->objective_;
}
inline ::operations_research::LinearObjective* LinearBooleanProblem::mutable_objective() {
  set_has_objective();
  if (objective_ == NULL) objective_ = new ::operations_research::LinearObjective;
  // @@protoc_insertion_point(field_mutable:operations_research.LinearBooleanProblem.objective)
  return objective_;
}
inline ::operations_research::LinearObjective* LinearBooleanProblem::release_objective() {
  clear_has_objective();
  ::operations_research::LinearObjective* temp = objective_;
  objective_ = NULL;
  return temp;
}
inline void LinearBooleanProblem::set_allocated_objective(::operations_research::LinearObjective* objective) {
  delete objective_;
  objective_ = objective;
  if (objective) {
    set_has_objective();
  } else {
    clear_has_objective();
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.LinearBooleanProblem.objective)
}

// repeated string var_names = 6;
inline int LinearBooleanProblem::var_names_size() const {
  return var_names_.size();
}
inline void LinearBooleanProblem::clear_var_names() {
  var_names_.Clear();
}
inline const ::std::string& LinearBooleanProblem::var_names(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanProblem.var_names)
  return var_names_.Get(index);
}
inline ::std::string* LinearBooleanProblem::mutable_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.LinearBooleanProblem.var_names)
  return var_names_.Mutable(index);
}
inline void LinearBooleanProblem::set_var_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanProblem.var_names)
  var_names_.Mutable(index)->assign(value);
}
inline void LinearBooleanProblem::set_var_names(int index, const char* value) {
  var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:operations_research.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::set_var_names(int index, const char* value, size_t size) {
  var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations_research.LinearBooleanProblem.var_names)
}
inline ::std::string* LinearBooleanProblem::add_var_names() {
  return var_names_.Add();
}
inline void LinearBooleanProblem::add_var_names(const ::std::string& value) {
  var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:operations_research.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(const char* value) {
  var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:operations_research.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(const char* value, size_t size) {
  var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:operations_research.LinearBooleanProblem.var_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LinearBooleanProblem::var_names() const {
  // @@protoc_insertion_point(field_list:operations_research.LinearBooleanProblem.var_names)
  return var_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LinearBooleanProblem::mutable_var_names() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.LinearBooleanProblem.var_names)
  return &var_names_;
}

// optional .operations_research.BooleanAssignment assignment = 7;
inline bool LinearBooleanProblem::has_assignment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LinearBooleanProblem::set_has_assignment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LinearBooleanProblem::clear_has_assignment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LinearBooleanProblem::clear_assignment() {
  if (assignment_ != NULL) assignment_->::operations_research::BooleanAssignment::Clear();
  clear_has_assignment();
}
inline const ::operations_research::BooleanAssignment& LinearBooleanProblem::assignment() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanProblem.assignment)
  return assignment_ != NULL ? *assignment_ : *default_instance_->assignment_;
}
inline ::operations_research::BooleanAssignment* LinearBooleanProblem::mutable_assignment() {
  set_has_assignment();
  if (assignment_ == NULL) assignment_ = new ::operations_research::BooleanAssignment;
  // @@protoc_insertion_point(field_mutable:operations_research.LinearBooleanProblem.assignment)
  return assignment_;
}
inline ::operations_research::BooleanAssignment* LinearBooleanProblem::release_assignment() {
  clear_has_assignment();
  ::operations_research::BooleanAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline void LinearBooleanProblem::set_allocated_assignment(::operations_research::BooleanAssignment* assignment) {
  delete assignment_;
  assignment_ = assignment;
  if (assignment) {
    set_has_assignment();
  } else {
    clear_has_assignment();
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.LinearBooleanProblem.assignment)
}

// optional int32 original_num_variables = 8;
inline bool LinearBooleanProblem::has_original_num_variables() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LinearBooleanProblem::set_has_original_num_variables() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LinearBooleanProblem::clear_has_original_num_variables() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LinearBooleanProblem::clear_original_num_variables() {
  original_num_variables_ = 0;
  clear_has_original_num_variables();
}
inline ::google::protobuf::int32 LinearBooleanProblem::original_num_variables() const {
  // @@protoc_insertion_point(field_get:operations_research.LinearBooleanProblem.original_num_variables)
  return original_num_variables_;
}
inline void LinearBooleanProblem::set_original_num_variables(::google::protobuf::int32 value) {
  set_has_original_num_variables();
  original_num_variables_ = value;
  // @@protoc_insertion_point(field_set:operations_research.LinearBooleanProblem.original_num_variables)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::operations_research::LinearBooleanProblem_ProblemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::LinearBooleanProblem_ProblemType>() {
  return ::operations_research::LinearBooleanProblem_ProblemType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sat_2fboolean_5fproblem_2eproto__INCLUDED
