// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sat/boolean_problem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sat/boolean_problem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace operations_research {

namespace {

const ::google::protobuf::Descriptor* LinearBooleanConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearBooleanConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearObjective_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearObjective_reflection_ = NULL;
const ::google::protobuf::Descriptor* BooleanAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BooleanAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearBooleanProblem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearBooleanProblem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LinearBooleanProblem_ProblemType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sat_2fboolean_5fproblem_2eproto() {
  protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sat/boolean_problem.proto");
  GOOGLE_CHECK(file != NULL);
  LinearBooleanConstraint_descriptor_ = file->message_type(0);
  static const int LinearBooleanConstraint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanConstraint, literals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanConstraint, coefficients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanConstraint, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanConstraint, upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanConstraint, name_),
  };
  LinearBooleanConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearBooleanConstraint_descriptor_,
      LinearBooleanConstraint::default_instance_,
      LinearBooleanConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearBooleanConstraint));
  LinearObjective_descriptor_ = file->message_type(1);
  static const int LinearObjective_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearObjective, literals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearObjective, coefficients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearObjective, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearObjective, scaling_factor_),
  };
  LinearObjective_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearObjective_descriptor_,
      LinearObjective::default_instance_,
      LinearObjective_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearObjective, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearObjective, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearObjective));
  BooleanAssignment_descriptor_ = file->message_type(2);
  static const int BooleanAssignment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanAssignment, literals_),
  };
  BooleanAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BooleanAssignment_descriptor_,
      BooleanAssignment::default_instance_,
      BooleanAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BooleanAssignment));
  LinearBooleanProblem_descriptor_ = file->message_type(3);
  static const int LinearBooleanProblem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, num_variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, constraints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, objective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, var_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, assignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, original_num_variables_),
  };
  LinearBooleanProblem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearBooleanProblem_descriptor_,
      LinearBooleanProblem::default_instance_,
      LinearBooleanProblem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBooleanProblem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearBooleanProblem));
  LinearBooleanProblem_ProblemType_descriptor_ = LinearBooleanProblem_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sat_2fboolean_5fproblem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearBooleanConstraint_descriptor_, &LinearBooleanConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearObjective_descriptor_, &LinearObjective::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BooleanAssignment_descriptor_, &BooleanAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearBooleanProblem_descriptor_, &LinearBooleanProblem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sat_2fboolean_5fproblem_2eproto() {
  delete LinearBooleanConstraint::default_instance_;
  delete LinearBooleanConstraint_reflection_;
  delete LinearObjective::default_instance_;
  delete LinearObjective_reflection_;
  delete BooleanAssignment::default_instance_;
  delete BooleanAssignment_reflection_;
  delete LinearBooleanProblem::default_instance_;
  delete LinearBooleanProblem_reflection_;
}

void protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031sat/boolean_problem.proto\022\023operations_"
    "research\"{\n\027LinearBooleanConstraint\022\020\n\010l"
    "iterals\030\001 \003(\005\022\024\n\014coefficients\030\002 \003(\003\022\023\n\013l"
    "ower_bound\030\003 \001(\003\022\023\n\013upper_bound\030\004 \001(\003\022\016\n"
    "\004name\030\005 \001(\t:\000\"g\n\017LinearObjective\022\020\n\010lite"
    "rals\030\001 \003(\005\022\024\n\014coefficients\030\002 \003(\003\022\021\n\006offs"
    "et\030\003 \001(\001:\0010\022\031\n\016scaling_factor\030\004 \001(\001:\0011\"%"
    "\n\021BooleanAssignment\022\020\n\010literals\030\001 \003(\005\"\304\003"
    "\n\024LinearBooleanProblem\022\016\n\004name\030\001 \001(\t:\000\022S"
    "\n\004type\030\002 \001(\01625.operations_research.Linea"
    "rBooleanProblem.ProblemType:\016SATISFIABIL"
    "ITY\022\025\n\rnum_variables\030\003 \001(\005\022A\n\013constraint"
    "s\030\004 \003(\0132,.operations_research.LinearBool"
    "eanConstraint\0227\n\tobjective\030\005 \001(\0132$.opera"
    "tions_research.LinearObjective\022\021\n\tvar_na"
    "mes\030\006 \003(\t\022:\n\nassignment\030\007 \001(\0132&.operatio"
    "ns_research.BooleanAssignment\022\036\n\026origina"
    "l_num_variables\030\010 \001(\005\"E\n\013ProblemType\022\022\n\016"
    "SATISFIABILITY\020\000\022\020\n\014MAXIMIZATION\020\001\022\020\n\014MI"
    "NIMIZATION\020\002", 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sat/boolean_problem.proto", &protobuf_RegisterTypes);
  LinearBooleanConstraint::default_instance_ = new LinearBooleanConstraint();
  LinearObjective::default_instance_ = new LinearObjective();
  BooleanAssignment::default_instance_ = new BooleanAssignment();
  LinearBooleanProblem::default_instance_ = new LinearBooleanProblem();
  LinearBooleanConstraint::default_instance_->InitAsDefaultInstance();
  LinearObjective::default_instance_->InitAsDefaultInstance();
  BooleanAssignment::default_instance_->InitAsDefaultInstance();
  LinearBooleanProblem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sat_2fboolean_5fproblem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sat_2fboolean_5fproblem_2eproto {
  StaticDescriptorInitializer_sat_2fboolean_5fproblem_2eproto() {
    protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  }
} static_descriptor_initializer_sat_2fboolean_5fproblem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LinearBooleanConstraint::kLiteralsFieldNumber;
const int LinearBooleanConstraint::kCoefficientsFieldNumber;
const int LinearBooleanConstraint::kLowerBoundFieldNumber;
const int LinearBooleanConstraint::kUpperBoundFieldNumber;
const int LinearBooleanConstraint::kNameFieldNumber;
#endif  // !_MSC_VER

LinearBooleanConstraint::LinearBooleanConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.LinearBooleanConstraint)
}

void LinearBooleanConstraint::InitAsDefaultInstance() {
}

LinearBooleanConstraint::LinearBooleanConstraint(const LinearBooleanConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.LinearBooleanConstraint)
}

void LinearBooleanConstraint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lower_bound_ = GOOGLE_LONGLONG(0);
  upper_bound_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearBooleanConstraint::~LinearBooleanConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.LinearBooleanConstraint)
  SharedDtor();
}

void LinearBooleanConstraint::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LinearBooleanConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearBooleanConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearBooleanConstraint_descriptor_;
}

const LinearBooleanConstraint& LinearBooleanConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  return *default_instance_;
}

LinearBooleanConstraint* LinearBooleanConstraint::default_instance_ = NULL;

LinearBooleanConstraint* LinearBooleanConstraint::New() const {
  return new LinearBooleanConstraint;
}

void LinearBooleanConstraint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LinearBooleanConstraint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 28) {
    ZR_(lower_bound_, upper_bound_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  literals_.Clear();
  coefficients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearBooleanConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.LinearBooleanConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 literals = 1;
      case 1: {
        if (tag == 8) {
         parse_literals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_literals())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_literals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_literals;
        if (input->ExpectTag(16)) goto parse_coefficients;
        break;
      }

      // repeated int64 coefficients = 2;
      case 2: {
        if (tag == 16) {
         parse_coefficients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_coefficients())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_coefficients())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coefficients;
        if (input->ExpectTag(24)) goto parse_lower_bound;
        break;
      }

      // optional int64 lower_bound = 3;
      case 3: {
        if (tag == 24) {
         parse_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lower_bound_)));
          set_has_lower_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upper_bound;
        break;
      }

      // optional int64 upper_bound = 4;
      case 4: {
        if (tag == 32) {
         parse_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upper_bound_)));
          set_has_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.LinearBooleanConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.LinearBooleanConstraint)
  return false;
#undef DO_
}

void LinearBooleanConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.LinearBooleanConstraint)
  // repeated int32 literals = 1;
  for (int i = 0; i < this->literals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->literals(i), output);
  }

  // repeated int64 coefficients = 2;
  for (int i = 0; i < this->coefficients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->coefficients(i), output);
  }

  // optional int64 lower_bound = 3;
  if (has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lower_bound(), output);
  }

  // optional int64 upper_bound = 4;
  if (has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->upper_bound(), output);
  }

  // optional string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.LinearBooleanConstraint)
}

::google::protobuf::uint8* LinearBooleanConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.LinearBooleanConstraint)
  // repeated int32 literals = 1;
  for (int i = 0; i < this->literals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->literals(i), target);
  }

  // repeated int64 coefficients = 2;
  for (int i = 0; i < this->coefficients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->coefficients(i), target);
  }

  // optional int64 lower_bound = 3;
  if (has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lower_bound(), target);
  }

  // optional int64 upper_bound = 4;
  if (has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->upper_bound(), target);
  }

  // optional string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.LinearBooleanConstraint)
  return target;
}

int LinearBooleanConstraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int64 lower_bound = 3;
    if (has_lower_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lower_bound());
    }

    // optional int64 upper_bound = 4;
    if (has_upper_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upper_bound());
    }

    // optional string name = 5 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int32 literals = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->literals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->literals(i));
    }
    total_size += 1 * this->literals_size() + data_size;
  }

  // repeated int64 coefficients = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->coefficients_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->coefficients(i));
    }
    total_size += 1 * this->coefficients_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearBooleanConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearBooleanConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearBooleanConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearBooleanConstraint::MergeFrom(const LinearBooleanConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  literals_.MergeFrom(from.literals_);
  coefficients_.MergeFrom(from.coefficients_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_lower_bound()) {
      set_lower_bound(from.lower_bound());
    }
    if (from.has_upper_bound()) {
      set_upper_bound(from.upper_bound());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearBooleanConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearBooleanConstraint::CopyFrom(const LinearBooleanConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearBooleanConstraint::IsInitialized() const {

  return true;
}

void LinearBooleanConstraint::Swap(LinearBooleanConstraint* other) {
  if (other != this) {
    literals_.Swap(&other->literals_);
    coefficients_.Swap(&other->coefficients_);
    std::swap(lower_bound_, other->lower_bound_);
    std::swap(upper_bound_, other->upper_bound_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearBooleanConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearBooleanConstraint_descriptor_;
  metadata.reflection = LinearBooleanConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinearObjective::kLiteralsFieldNumber;
const int LinearObjective::kCoefficientsFieldNumber;
const int LinearObjective::kOffsetFieldNumber;
const int LinearObjective::kScalingFactorFieldNumber;
#endif  // !_MSC_VER

LinearObjective::LinearObjective()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.LinearObjective)
}

void LinearObjective::InitAsDefaultInstance() {
}

LinearObjective::LinearObjective(const LinearObjective& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.LinearObjective)
}

void LinearObjective::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  scaling_factor_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearObjective::~LinearObjective() {
  // @@protoc_insertion_point(destructor:operations_research.LinearObjective)
  SharedDtor();
}

void LinearObjective::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LinearObjective::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearObjective::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearObjective_descriptor_;
}

const LinearObjective& LinearObjective::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  return *default_instance_;
}

LinearObjective* LinearObjective::default_instance_ = NULL;

LinearObjective* LinearObjective::New() const {
  return new LinearObjective;
}

void LinearObjective::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    offset_ = 0;
    scaling_factor_ = 1;
  }
  literals_.Clear();
  coefficients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearObjective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.LinearObjective)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 literals = 1;
      case 1: {
        if (tag == 8) {
         parse_literals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_literals())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_literals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_literals;
        if (input->ExpectTag(16)) goto parse_coefficients;
        break;
      }

      // repeated int64 coefficients = 2;
      case 2: {
        if (tag == 16) {
         parse_coefficients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_coefficients())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_coefficients())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coefficients;
        if (input->ExpectTag(25)) goto parse_offset;
        break;
      }

      // optional double offset = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_scaling_factor;
        break;
      }

      // optional double scaling_factor = 4 [default = 1];
      case 4: {
        if (tag == 33) {
         parse_scaling_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scaling_factor_)));
          set_has_scaling_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.LinearObjective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.LinearObjective)
  return false;
#undef DO_
}

void LinearObjective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.LinearObjective)
  // repeated int32 literals = 1;
  for (int i = 0; i < this->literals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->literals(i), output);
  }

  // repeated int64 coefficients = 2;
  for (int i = 0; i < this->coefficients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->coefficients(i), output);
  }

  // optional double offset = 3 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->offset(), output);
  }

  // optional double scaling_factor = 4 [default = 1];
  if (has_scaling_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->scaling_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.LinearObjective)
}

::google::protobuf::uint8* LinearObjective::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.LinearObjective)
  // repeated int32 literals = 1;
  for (int i = 0; i < this->literals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->literals(i), target);
  }

  // repeated int64 coefficients = 2;
  for (int i = 0; i < this->coefficients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->coefficients(i), target);
  }

  // optional double offset = 3 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->offset(), target);
  }

  // optional double scaling_factor = 4 [default = 1];
  if (has_scaling_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->scaling_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.LinearObjective)
  return target;
}

int LinearObjective::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional double offset = 3 [default = 0];
    if (has_offset()) {
      total_size += 1 + 8;
    }

    // optional double scaling_factor = 4 [default = 1];
    if (has_scaling_factor()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 literals = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->literals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->literals(i));
    }
    total_size += 1 * this->literals_size() + data_size;
  }

  // repeated int64 coefficients = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->coefficients_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->coefficients(i));
    }
    total_size += 1 * this->coefficients_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearObjective::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearObjective* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearObjective*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearObjective::MergeFrom(const LinearObjective& from) {
  GOOGLE_CHECK_NE(&from, this);
  literals_.MergeFrom(from.literals_);
  coefficients_.MergeFrom(from.coefficients_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_scaling_factor()) {
      set_scaling_factor(from.scaling_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearObjective::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearObjective::CopyFrom(const LinearObjective& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearObjective::IsInitialized() const {

  return true;
}

void LinearObjective::Swap(LinearObjective* other) {
  if (other != this) {
    literals_.Swap(&other->literals_);
    coefficients_.Swap(&other->coefficients_);
    std::swap(offset_, other->offset_);
    std::swap(scaling_factor_, other->scaling_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearObjective::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearObjective_descriptor_;
  metadata.reflection = LinearObjective_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BooleanAssignment::kLiteralsFieldNumber;
#endif  // !_MSC_VER

BooleanAssignment::BooleanAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.BooleanAssignment)
}

void BooleanAssignment::InitAsDefaultInstance() {
}

BooleanAssignment::BooleanAssignment(const BooleanAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.BooleanAssignment)
}

void BooleanAssignment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BooleanAssignment::~BooleanAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.BooleanAssignment)
  SharedDtor();
}

void BooleanAssignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BooleanAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BooleanAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BooleanAssignment_descriptor_;
}

const BooleanAssignment& BooleanAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  return *default_instance_;
}

BooleanAssignment* BooleanAssignment::default_instance_ = NULL;

BooleanAssignment* BooleanAssignment::New() const {
  return new BooleanAssignment;
}

void BooleanAssignment::Clear() {
  literals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BooleanAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.BooleanAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 literals = 1;
      case 1: {
        if (tag == 8) {
         parse_literals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_literals())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_literals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_literals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.BooleanAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.BooleanAssignment)
  return false;
#undef DO_
}

void BooleanAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.BooleanAssignment)
  // repeated int32 literals = 1;
  for (int i = 0; i < this->literals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->literals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.BooleanAssignment)
}

::google::protobuf::uint8* BooleanAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.BooleanAssignment)
  // repeated int32 literals = 1;
  for (int i = 0; i < this->literals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->literals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.BooleanAssignment)
  return target;
}

int BooleanAssignment::ByteSize() const {
  int total_size = 0;

  // repeated int32 literals = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->literals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->literals(i));
    }
    total_size += 1 * this->literals_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BooleanAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BooleanAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BooleanAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BooleanAssignment::MergeFrom(const BooleanAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  literals_.MergeFrom(from.literals_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BooleanAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanAssignment::CopyFrom(const BooleanAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanAssignment::IsInitialized() const {

  return true;
}

void BooleanAssignment::Swap(BooleanAssignment* other) {
  if (other != this) {
    literals_.Swap(&other->literals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BooleanAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BooleanAssignment_descriptor_;
  metadata.reflection = BooleanAssignment_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LinearBooleanProblem_ProblemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearBooleanProblem_ProblemType_descriptor_;
}
bool LinearBooleanProblem_ProblemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LinearBooleanProblem_ProblemType LinearBooleanProblem::SATISFIABILITY;
const LinearBooleanProblem_ProblemType LinearBooleanProblem::MAXIMIZATION;
const LinearBooleanProblem_ProblemType LinearBooleanProblem::MINIMIZATION;
const LinearBooleanProblem_ProblemType LinearBooleanProblem::ProblemType_MIN;
const LinearBooleanProblem_ProblemType LinearBooleanProblem::ProblemType_MAX;
const int LinearBooleanProblem::ProblemType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LinearBooleanProblem::kNameFieldNumber;
const int LinearBooleanProblem::kTypeFieldNumber;
const int LinearBooleanProblem::kNumVariablesFieldNumber;
const int LinearBooleanProblem::kConstraintsFieldNumber;
const int LinearBooleanProblem::kObjectiveFieldNumber;
const int LinearBooleanProblem::kVarNamesFieldNumber;
const int LinearBooleanProblem::kAssignmentFieldNumber;
const int LinearBooleanProblem::kOriginalNumVariablesFieldNumber;
#endif  // !_MSC_VER

LinearBooleanProblem::LinearBooleanProblem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.LinearBooleanProblem)
}

void LinearBooleanProblem::InitAsDefaultInstance() {
  objective_ = const_cast< ::operations_research::LinearObjective*>(&::operations_research::LinearObjective::default_instance());
  assignment_ = const_cast< ::operations_research::BooleanAssignment*>(&::operations_research::BooleanAssignment::default_instance());
}

LinearBooleanProblem::LinearBooleanProblem(const LinearBooleanProblem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.LinearBooleanProblem)
}

void LinearBooleanProblem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  num_variables_ = 0;
  objective_ = NULL;
  assignment_ = NULL;
  original_num_variables_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearBooleanProblem::~LinearBooleanProblem() {
  // @@protoc_insertion_point(destructor:operations_research.LinearBooleanProblem)
  SharedDtor();
}

void LinearBooleanProblem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete objective_;
    delete assignment_;
  }
}

void LinearBooleanProblem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearBooleanProblem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearBooleanProblem_descriptor_;
}

const LinearBooleanProblem& LinearBooleanProblem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sat_2fboolean_5fproblem_2eproto();
  return *default_instance_;
}

LinearBooleanProblem* LinearBooleanProblem::default_instance_ = NULL;

LinearBooleanProblem* LinearBooleanProblem::New() const {
  return new LinearBooleanProblem;
}

void LinearBooleanProblem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LinearBooleanProblem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 215) {
    ZR_(type_, num_variables_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_objective()) {
      if (objective_ != NULL) objective_->::operations_research::LinearObjective::Clear();
    }
    if (has_assignment()) {
      if (assignment_ != NULL) assignment_->::operations_research::BooleanAssignment::Clear();
    }
    original_num_variables_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  constraints_.Clear();
  var_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearBooleanProblem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.LinearBooleanProblem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .operations_research.LinearBooleanProblem.ProblemType type = 2 [default = SATISFIABILITY];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::LinearBooleanProblem_ProblemType_IsValid(value)) {
            set_type(static_cast< ::operations_research::LinearBooleanProblem_ProblemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_variables;
        break;
      }

      // optional int32 num_variables = 3;
      case 3: {
        if (tag == 24) {
         parse_num_variables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_variables_)));
          set_has_num_variables();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_constraints;
        break;
      }

      // repeated .operations_research.LinearBooleanConstraint constraints = 4;
      case 4: {
        if (tag == 34) {
         parse_constraints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_constraints;
        if (input->ExpectTag(42)) goto parse_objective;
        break;
      }

      // optional .operations_research.LinearObjective objective = 5;
      case 5: {
        if (tag == 42) {
         parse_objective:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objective()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_var_names;
        break;
      }

      // repeated string var_names = 6;
      case 6: {
        if (tag == 50) {
         parse_var_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_var_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->var_names(this->var_names_size() - 1).data(),
            this->var_names(this->var_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "var_names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_var_names;
        if (input->ExpectTag(58)) goto parse_assignment;
        break;
      }

      // optional .operations_research.BooleanAssignment assignment = 7;
      case 7: {
        if (tag == 58) {
         parse_assignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assignment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_original_num_variables;
        break;
      }

      // optional int32 original_num_variables = 8;
      case 8: {
        if (tag == 64) {
         parse_original_num_variables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_num_variables_)));
          set_has_original_num_variables();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.LinearBooleanProblem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.LinearBooleanProblem)
  return false;
#undef DO_
}

void LinearBooleanProblem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.LinearBooleanProblem)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .operations_research.LinearBooleanProblem.ProblemType type = 2 [default = SATISFIABILITY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 num_variables = 3;
  if (has_num_variables()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_variables(), output);
  }

  // repeated .operations_research.LinearBooleanConstraint constraints = 4;
  for (int i = 0; i < this->constraints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->constraints(i), output);
  }

  // optional .operations_research.LinearObjective objective = 5;
  if (has_objective()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->objective(), output);
  }

  // repeated string var_names = 6;
  for (int i = 0; i < this->var_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->var_names(i).data(), this->var_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "var_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->var_names(i), output);
  }

  // optional .operations_research.BooleanAssignment assignment = 7;
  if (has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->assignment(), output);
  }

  // optional int32 original_num_variables = 8;
  if (has_original_num_variables()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->original_num_variables(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.LinearBooleanProblem)
}

::google::protobuf::uint8* LinearBooleanProblem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.LinearBooleanProblem)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .operations_research.LinearBooleanProblem.ProblemType type = 2 [default = SATISFIABILITY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 num_variables = 3;
  if (has_num_variables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_variables(), target);
  }

  // repeated .operations_research.LinearBooleanConstraint constraints = 4;
  for (int i = 0; i < this->constraints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->constraints(i), target);
  }

  // optional .operations_research.LinearObjective objective = 5;
  if (has_objective()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->objective(), target);
  }

  // repeated string var_names = 6;
  for (int i = 0; i < this->var_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_names(i).data(), this->var_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->var_names(i), target);
  }

  // optional .operations_research.BooleanAssignment assignment = 7;
  if (has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->assignment(), target);
  }

  // optional int32 original_num_variables = 8;
  if (has_original_num_variables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->original_num_variables(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.LinearBooleanProblem)
  return target;
}

int LinearBooleanProblem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .operations_research.LinearBooleanProblem.ProblemType type = 2 [default = SATISFIABILITY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 num_variables = 3;
    if (has_num_variables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_variables());
    }

    // optional .operations_research.LinearObjective objective = 5;
    if (has_objective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objective());
    }

    // optional .operations_research.BooleanAssignment assignment = 7;
    if (has_assignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assignment());
    }

    // optional int32 original_num_variables = 8;
    if (has_original_num_variables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_num_variables());
    }

  }
  // repeated .operations_research.LinearBooleanConstraint constraints = 4;
  total_size += 1 * this->constraints_size();
  for (int i = 0; i < this->constraints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraints(i));
  }

  // repeated string var_names = 6;
  total_size += 1 * this->var_names_size();
  for (int i = 0; i < this->var_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->var_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearBooleanProblem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearBooleanProblem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearBooleanProblem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearBooleanProblem::MergeFrom(const LinearBooleanProblem& from) {
  GOOGLE_CHECK_NE(&from, this);
  constraints_.MergeFrom(from.constraints_);
  var_names_.MergeFrom(from.var_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num_variables()) {
      set_num_variables(from.num_variables());
    }
    if (from.has_objective()) {
      mutable_objective()->::operations_research::LinearObjective::MergeFrom(from.objective());
    }
    if (from.has_assignment()) {
      mutable_assignment()->::operations_research::BooleanAssignment::MergeFrom(from.assignment());
    }
    if (from.has_original_num_variables()) {
      set_original_num_variables(from.original_num_variables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearBooleanProblem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearBooleanProblem::CopyFrom(const LinearBooleanProblem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearBooleanProblem::IsInitialized() const {

  return true;
}

void LinearBooleanProblem::Swap(LinearBooleanProblem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(num_variables_, other->num_variables_);
    constraints_.Swap(&other->constraints_);
    std::swap(objective_, other->objective_);
    var_names_.Swap(&other->var_names_);
    std::swap(assignment_, other->assignment_);
    std::swap(original_num_variables_, other->original_num_variables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearBooleanProblem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearBooleanProblem_descriptor_;
  metadata.reflection = LinearBooleanProblem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
